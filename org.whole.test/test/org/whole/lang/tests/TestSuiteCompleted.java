package org.whole.lang.tests;

import org.whole.lang.builders.IBuilderOperation;
import org.whole.lang.templates.AbstractTemplateFactory;

public class TestSuiteCompleted extends AbstractTemplateFactory<org.whole.lang.tests.model.TestSuite> {

    public void apply(IBuilderOperation op) {
        org.whole.lang.tests.builders.ITestsBuilder b0 = (org.whole.lang.tests.builders.ITestsBuilder) op.wGetBuilder(org.whole.lang.tests.reflect.TestsLanguageKit.URI);
        b0.TestSuite_();
        b0.PackageName("org.whole.lang.tests");
        org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
        b1.Resolver();
        b0.Name("TestSuite");
        b1.Resolver();
        b0.FilterFamilies_(2);
        b0.FilterFamily_();
        b1.Resolver();
        b1.Resolver();
        b0.Name("FilterFamily");
        b0.FilterRules_(1);
        b0.FilterRule_();
        b0.Description("Fixed substring filter");
        b0.Name("substringFilter");
        org.whole.lang.workflows.builders.IWorkflowsBuilder b2 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
        b2.InvokeJavaClassMethod_();
        b2.Text("apply java filter");
        b1.Resolver();
        b1.Resolver();
        b2.StringLiteral("org.whole.lang.tests.TestSuiteHelpers");
        b2.StringLiteral("extractSubString(org.whole.lang.model.IEntity)");
        b2.Expressions_(1);
        b2.Variable("self");
        b2._Expressions();
        b2._InvokeJavaClassMethod();
        b0._FilterRule();
        b0._FilterRules();
        b0._FilterFamily();
        b0.FilterFamily_();
        b1.Resolver();
        b0.Description("Auto-generated filter family");
        b0.Name("GeneratedFilters");
        b0.FilterRules_(1);
        b0.FilterRule_();
        b0.Description("Auto-generated filter rule");
        b0.Name("generatedFilter");
        org.whole.lang.queries.builders.IQueriesBuilder b3 = (org.whole.lang.queries.builders.IQueriesBuilder) op.wGetBuilder(org.whole.lang.queries.reflect.QueriesLanguageKit.URI);
        b3.Sequence_(2);
        b3.Delete_();
        b3.Path_(2);
        b3.FeatureStep("http://lang.whole.org/Java#arguments");
        b3.Filter_();
        b3.ChildStep();
        b3.IndexTest_();
        b3.IntLiteral(2);
        b3._IndexTest();
        b3._Filter();
        b3._Path();
        b3._Delete();
        b3.Delete_();
        b3.Path_(2);
        b3.FeatureStep("http://lang.whole.org/Java#arguments");
        b3.Filter_();
        b3.ChildStep();
        b3.IndexTest_();
        b3.IntLiteral(2);
        b3._IndexTest();
        b3._Filter();
        b3._Path();
        b3._Delete();
        b3._Sequence();
        b0._FilterRule();
        b0._FilterRules();
        b0._FilterFamily();
        b0._FilterFamilies();
        b0.TestCases_(1);
        b0.TestCase_();
        b1.Resolver();
        b1.Resolver();
        b0.Name("TestCase");
        b1.Resolver();
        b0.Aspects_(0);
        b0._Aspects();
        b0.Tests_(1);
        b0.Test_();
        b1.Resolver();
        b0.Name("testQueriesFilter");
        b0.TestStatements_(5);
        b3.Filter_();
        b1.StageUpFragment_();
        org.whole.lang.java.builders.IJavaBuilder b4 = (org.whole.lang.java.builders.IJavaBuilder) op.wGetBuilder(org.whole.lang.java.reflect.JavaLanguageKit.URI);
        b4.MethodInvocation_();
        b4.ThisExpression_();
        b1.Resolver();
        b4._ThisExpression();
        b4.Types_(0);
        b4._Types();
        b4.SimpleName("updateNormalization");
        b4.Arguments_(4);
        b4.SimpleName("baseEntity");
        b4.MethodInvocation_();
        b4.SimpleName("iterator");
        b4.Types_(0);
        b4._Types();
        b4.SimpleName("next");
        b4.Arguments_(0);
        b4._Arguments();
        b4._MethodInvocation();
        b4.LongLiteral(12345l);
        b4.LongLiteral(12345l);
        b4._Arguments();
        b4._MethodInvocation();
        b1._StageUpFragment();
        b3.VariableTest("template");
        b3._Filter();
        b2.InvokeJavaClassMethod_();
        b2.Text("currentTimeMillis");
        b1.Resolver();
        b1.Resolver();
        b2.StringLiteral("java.lang.Thread");
        b2.StringLiteral("sleep(long)");
        b2.Expressions_(1);
        b2.IntLiteral(1);
        b2._Expressions();
        b2._InvokeJavaClassMethod();
        b3.CartesianUpdate_();
        b3.Path_(2);
        b3.VariableRefStep("template");
        b3.Filter_();
        b3.DescendantStep();
        b3.TypeTest("LongLiteral");
        b3._Filter();
        b3._Path();
        b2.InvokeJavaClassMethod_();
        b2.Text("currentTimeMillis");
        b1.Resolver();
        b1.Resolver();
        b2.StringLiteral("java.lang.System");
        b2.StringLiteral("currentTimeMillis()");
        b1.Resolver();
        b2._InvokeJavaClassMethod();
        b3._CartesianUpdate();
        b0.UsingFilter_();
        b0.Filter_();
        b0.Name("GeneratedFilters.generatedFilter");
        b0._Filter();
        b0.AssertThat_();
        b0.DataName("template");
        b0.Matches_();
        b1.StageUpFragment_();
        b4.MethodInvocation_();
        b4.ThisExpression_();
        b1.Resolver();
        b4._ThisExpression();
        b4.Types_(0);
        b4._Types();
        b4.SimpleName("updateNormalization");
        b4.Arguments_(4);
        b4.SimpleName("baseEntity");
        b4.MethodInvocation_();
        b4.SimpleName("iterator");
        b4.Types_(0);
        b4._Types();
        b4.SimpleName("next");
        b4.Arguments_(0);
        b4._Arguments();
        b4._MethodInvocation();
        b4.LongLiteral(1299693427094l);
        b4.LongLiteral(1299693427095l);
        b4._Arguments();
        b4._MethodInvocation();
        b1._StageUpFragment();
        b0._Matches();
        b0._AssertThat();
        b0._UsingFilter();
        b0.UsingFilter_();
        b0.Filter_();
        b0.Name("FilterFamily.substringFilter");
        b0._Filter();
        b0.AssertThat_();
        b0.StringLiteral("01234PIPPO");
        b0.Matches_();
        b0.StringLiteral("43210PIPPO");
        b0._Matches();
        b0._AssertThat();
        b0._UsingFilter();
        b0._TestStatements();
        b0._Test();
        b0._Tests();
        b0._TestCase();
        b0._TestCases();
        b0._TestSuite();
    }
}
