package org.whole.lang.grammars.util.tests;

import org.whole.lang.model.IEntity;
import org.whole.lang.templates.AbstractTemplateFactory;
import org.whole.lang.templates.AbstractTemplateManager;
import org.whole.lang.templates.ITemplateFactory;

public class Grammars2ModelsVisitorTestTemplateManager extends AbstractTemplateManager {

    private static class SingletonHolder {
        private static final Grammars2ModelsVisitorTestTemplateManager instance = new Grammars2ModelsVisitorTestTemplateManager();
    }

    public static Grammars2ModelsVisitorTestTemplateManager instance() {
        return SingletonHolder.instance;
    }

    private Grammars2ModelsVisitorTestTemplateManager() {
        put("fragment", newFragment());
        put("fragment1", newFragment1());
        put("fragment2", newFragment2());
        put("fragment3", newFragment3());
        put("fragment4", newFragment4());
        put("fragment5", newFragment5());
        put("fragment6", newFragment6());
        put("fragment7", newFragment7());
        put("fragment8", newFragment8());
        put("fragment9", newFragment9());
        put("fragment10", newFragment10());
        put("fragment11", newFragment11());
        put("fragment12", newFragment12());
        put("fragment13", newFragment13());
        put("fragment14", newFragment14());
        put("fragment15", newFragment15());
        put("fragment16", newFragment16());
        put("fragment17", newFragment17());
        put("fragment18", newFragment18());
        put("fragment19", newFragment19());
        put("fragment20", newFragment20());
        put("fragment21", newFragment21());
        put("fragment22", newFragment22());
        put("fragment23", newFragment23());
        put("fragment24", newFragment24());
        put("fragment25", newFragment25());
        put("fragment26", newFragment26());
        put("fragment27", newFragment27());
    }

    public ITemplateFactory<IEntity> newFragment() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("LanguageNameGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/LanguageName");
                b2.Namespace("org.whole.lang.language");
                b2.Name("LanguageName");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("NT_DATA1");
                b1.Resolver();
                b2.Productions_(2);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("pattern");
                b2.Category("DELIMITER");
                b2.Literal("literal");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.Empty_();
                b2.Literal("");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(10);
                b2.Production_();
                b2.NonTerminal("NT_DATA1");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA2");
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA3");
                b2.Concatenate_(1);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA4");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA4_AS");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA4_PROD1");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("DATA4Prod1");
                b2.Name("dATA4Prod1");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA4_PROD2");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("DATA4Prod2");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA4Prod1");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA4Prod2");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/LanguageNameGrammar");
                b2.Namespace("org.whole.lang.language");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment1() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("LanguageName");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(10);
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA1");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA2");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA3");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA4");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA4_AS");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("name");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA4_PROD1");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("DATA4Prod1");
                b0.SimpleName("dATA4Prod1");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA4_PROD2");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("DATA4Prod2");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Name");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DATA4Prod1");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DATA4Prod2");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.lang.language");
                b1.Resolver();
                b0.URI("http://lang.whole.org/LanguageName");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment2() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("LanguageNameGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/LanguageName");
                b2.Namespace("org.whole.lang.language");
                b2.Name("LanguageName");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("NT_DATA5");
                b1.Resolver();
                b2.Productions_(1);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("pattern");
                b2.Category("DELIMITER");
                b2.Literal("literal");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(11);
                b2.Production_();
                b2.NonTerminal("NT_DATA5");
                b2.Concatenate_(1);
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA5_AS");
                b2.Concatenate_(1);
                b2.Split_();
                b2.BySize(5);
                b2.As_();
                b2.NonTerminal("Namex");
                b2.Name("namex");
                b2._As();
                b2._Split();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA5_PROD1");
                b2.Concatenate_(1);
                b2.As_();
                b2.NonTerminal("DATA5Prod1");
                b2.Name("dATA5Prod1");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA5_PROD2");
                b2.Concatenate_(1);
                b2.As_();
                b2.NonTerminal("DATA5Prod2");
                b2.Name("name");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA6");
                b2.Split_();
                b2.BySize(12);
                b2.Concatenate_(2);
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.NonTerminal("TOKEN");
                b2._Concatenate();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA6_PROD1");
                b2.Split_();
                b2.BySize(12);
                b2.As_();
                b2.NonTerminal("DATA6Prod1");
                b2.Name("dATA6Prod1");
                b2._As();
                b2._Split();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA7");
                b2.Concatenate_(2);
                b2.NonTerminal("TOKEN");
                b2.Split_();
                b2.BySize(12);
                b2.Concatenate_(2);
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.NonTerminal("TOKEN");
                b2._Concatenate();
                b2._Split();
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Namex");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA5Prod1");
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA5Prod2");
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA6Prod1");
                b2.Concatenate_(2);
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.NonTerminal("TOKEN");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/LanguageNameGrammar");
                b2.Namespace("org.whole.lang.language");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment3() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("LanguageName");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(11);
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA5");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA5_AS");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Namex");
                b0.SimpleName("namex");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA5_PROD1");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("DATA5Prod1");
                b0.SimpleName("dATA5Prod1");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA5_PROD2");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("DATA5Prod2");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA6");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA6_PROD1");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("DATA6Prod1");
                b0.SimpleName("dATA6Prod1");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NT_DATA7");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Namex");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DATA5Prod1");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DATA5Prod2");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DATA6Prod1");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.lang.language");
                b1.Resolver();
                b0.URI("http://lang.whole.org/LanguageName");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment4() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("grammarName");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/LanguageName");
                b2.Namespace("org.whole.lang.language");
                b2.Name("LanguageName");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("A");
                b1.Resolver();
                b2.Productions_(8);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("a");
                b2.Category("DELIMITER");
                b2.Literal("a");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("b");
                b2.Category("DELIMITER");
                b2.Literal("b");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("c");
                b2.Category("DELIMITER");
                b2.Literal("c");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("d");
                b2.Category("DELIMITER");
                b2.Literal("d");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("e");
                b2.Category("DELIMITER");
                b2.Literal("e");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("f");
                b2.Category("DELIMITER");
                b2.Literal("f");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("g");
                b2.Category("DELIMITER");
                b2.Literal("g");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("h");
                b2.Category("DELIMITER");
                b2.Literal("h");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("A");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("B");
                b2._Repeat();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("B");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.Choose_(2);
                b2.NonTerminal("A");
                b2.NonTerminal("C");
                b2._Choose();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("C");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN4");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.NonTerminal("TOKEN5");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("D");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.Split_();
                b2.BySize(5);
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("B");
                b2._Repeat();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DD");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.Split_();
                b2.BySize(5);
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("B");
                b2._Repeat();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("E");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("E1");
                b2.Name("e1");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EE");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("EE1");
                b2.Name("eE1");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("F");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN4");
                b2.When_();
                b2.NonTerminal("TOKEN");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._When();
                b2.NonTerminal("TOKEN5");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("G");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN4");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN5");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("E1");
                b2.Choose_(2);
                b2.NonTerminal("A");
                b2.NonTerminal("C");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EE1");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.Choose_(2);
                b2.NonTerminal("A");
                b2.NonTerminal("C");
                b2._Choose();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN6");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.NonTerminal("TOKEN7");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/LanguageNameGrammar");
                b2.Namespace("org.whole.lang.language");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment5() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("LanguageName");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(12);
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("A");
                b0.Types_(3);
                b0.SimpleName("B");
                b0.SimpleName("E1");
                b0.SimpleName("EE1");
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("B");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("B");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("C");
                b0.Types_(3);
                b0.SimpleName("B");
                b0.SimpleName("E1");
                b0.SimpleName("EE1");
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("D");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("B");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DD");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("B");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("E");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("E1");
                b0.SimpleName("e1");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("EE");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("EE1");
                b0.SimpleName("eE1");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("F");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("G");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("E1");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("EE1");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Name");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.lang.language");
                b1.Resolver();
                b0.URI("http://lang.whole.org/LanguageName");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment6() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("TestGrammar1");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/Test1");
                b2.Namespace("org.whole.lang.language");
                b2.Name("Test1");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("CSVSimple");
                b1.Resolver();
                b2.Productions_(27);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("a literal terminal");
                b2.Category("DELIMITER");
                b2.Literal("a literal terminal");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("[0-9a-zA-Z]{6}[a-zA-Z]{2}");
                b2.Category("DELIMITER");
                b2.Literal("abcedfgh");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("BEGIN");
                b2.Category("DELIMITER");
                b2.Literal("BEGIN");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("[AB]");
                b2.Category("DELIMITER");
                b2.Literal("A");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("[0-9]{2,5}");
                b2.Category("DELIMITER");
                b2.Literal("666");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("(,[0-9]{2})*");
                b2.Category("DELIMITER");
                b2.Literal(",12,23,34");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("END");
                b2.Category("DELIMITER");
                b2.Literal("END");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q(\\E");
                b2.Category("DELIMITER");
                b2.Literal("(");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp(",");
                b2.Category("DELIMITER");
                b2.Literal(",");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN9");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q)\\E");
                b2.Category("DELIMITER");
                b2.Literal(")");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN10");
                b2.LiteralTerminal_();
                b2.RegExp("a");
                b2.Category("DELIMITER");
                b2.Literal("a");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN11");
                b2.LiteralTerminal_();
                b2.RegExp("n optional");
                b2.Category("DELIMITER");
                b2.Literal("n optional");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN12");
                b2.LiteralTerminal_();
                b2.RegExp(" literal terminal");
                b2.Category("DELIMITER");
                b2.Literal(" literal terminal");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN13");
                b2.LiteralTerminal_();
                b2.RegExp("n");
                b2.Category("DELIMITER");
                b2.Literal("n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN14");
                b2.LiteralTerminal_();
                b2.RegExp("\\s+");
                b2.Category("DELIMITER");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN15");
                b2.LiteralTerminal_();
                b2.RegExp("optional");
                b2.Category("DELIMITER");
                b2.Literal("optional");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN16");
                b2.LiteralTerminal_();
                b2.RegExp("Message: ");
                b2.Category("DELIMITER");
                b2.Literal("Message: ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN17");
                b2.LiteralTerminal_();
                b2.RegExp(" ");
                b2.Category("DELIMITER");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN18");
                b2.LiteralTerminal_();
                b2.RegExp("bla");
                b2.Category("DELIMITER");
                b2.Literal("bla");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN19");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q.\\E");
                b2.Category("DELIMITER");
                b2.Literal(".");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN20");
                b2.LiteralTerminal_();
                b2.RegExp("My ");
                b2.Category("DELIMITER");
                b2.Literal("My ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN21");
                b2.LiteralTerminal_();
                b2.RegExp("dog");
                b2.Category("DELIMITER");
                b2.Literal("dog");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN22");
                b2.LiteralTerminal_();
                b2.RegExp("cat");
                b2.Category("DELIMITER");
                b2.Literal("cat");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN23");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q is sleeping.\\E");
                b2.Category("DELIMITER");
                b2.Literal(" is sleeping.");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN24");
                b2.LiteralTerminal_();
                b2.RegExp(".*\\n");
                b2.Category("DELIMITER");
                b2.Literal("a string, an int, a char, a double\\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN25");
                b2.LiteralTerminal_();
                b2.RegExp("\\n");
                b1.Resolver();
                b2.Literal("\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN26");
                b2.LiteralTerminal_();
                b2.RegExp(",");
                b1.Resolver();
                b2.Literal(", ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(29);
                b2.Production_();
                b2.NonTerminal("SingleLiteral");
                b2.NonTerminal("TOKEN");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SinglePatternLiteral");
                b2.NonTerminal("TOKEN1");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("LiteralSequence");
                b2.Concatenate_(5);
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("TOKEN6");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SingleData");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DataSequence");
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN7");
                b2.As_();
                b2.NonTerminal("F1");
                b2.Name("f1");
                b2._As();
                b2.As_();
                b2.NonTerminal("F2");
                b2.Name("f2");
                b2._As();
                b2.NonTerminal("TOKEN8");
                b2.As_();
                b2.NonTerminal("F3");
                b2.Name("f3");
                b2._As();
                b2.NonTerminal("TOKEN9");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DataSequenceWithDataTypes");
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN7");
                b2.As_();
                b2.NonTerminal("EF1");
                b2.Name("f1");
                b2._As();
                b2.As_();
                b2.NonTerminal("EF2");
                b2.Name("f2");
                b2._As();
                b2.NonTerminal("TOKEN8");
                b2.As_();
                b2.NonTerminal("EF2");
                b2.Name("f3");
                b2._As();
                b2.NonTerminal("TOKEN9");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("OptionalLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN10");
                b2.Optional_();
                b2.NonTerminal("TOKEN11");
                b2._Optional();
                b2.NonTerminal("TOKEN12");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("OptionalConcatenate");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN10");
                b2.Optional_();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN13");
                b2.NonTerminal("TOKEN14");
                b2.NonTerminal("TOKEN15");
                b2._Concatenate();
                b2._Optional();
                b2.As_();
                b2.NonTerminal("OptionalConcatenate1");
                b2.Name("optionalConcatenate1");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("RepeatedLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN16");
                b2.Repeat_();
                b2.Size(1);
                b2.Size(3);
                b2.NonTerminal("TOKEN17");
                b2.Concatenate_(1);
                b2.NonTerminal("TOKEN18");
                b2._Concatenate();
                b2._Repeat();
                b2.NonTerminal("TOKEN19");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("RepeatedOptionalLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN16");
                b2.Repeat_();
                b2.Size(0);
                b2.Size(3);
                b2.NonTerminal("TOKEN17");
                b2.NonTerminal("TOKEN18");
                b2._Repeat();
                b2.NonTerminal("TOKEN19");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("RepeatedUnboundedLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN16");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN17");
                b2.NonTerminal("TOKEN18");
                b2._Repeat();
                b2.NonTerminal("TOKEN19");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChooseLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN20");
                b2.Choose_(2);
                b2.NonTerminal("TOKEN21");
                b2.NonTerminal("TOKEN22");
                b2._Choose();
                b2.NonTerminal("TOKEN23");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChoosePolymorphic");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN20");
                b2.Choose_(2);
                b2.NonTerminal("ChooseType1");
                b2.NonTerminal("ChooseType2");
                b2._Choose();
                b2.NonTerminal("TOKEN23");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChooseEnum");
                b2.Choose_(2);
                b2.As_();
                b2.NonTerminal("TOKEN21");
                b2.Name("DOG");
                b2._As();
                b2.As_();
                b2.NonTerminal("TOKEN22");
                b2.Name("CAT");
                b2._As();
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CSVSimple");
                b2.Concatenate_(2);
                b2.NonTerminal("TOKEN24");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN25");
                b2.NonTerminal("CSVSimple1");
                b2._Repeat();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("STRING");
                b2.DataTerminal_();
                b2.RegExp("(?:\")(.*)(?:\")|[^\",]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CHAR");
                b2.DataTerminal_();
                b2.RegExp("(?s).");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("CHAR");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("INT");
                b2.DataTerminal_();
                b2.RegExp("([-+]?([0-9]++))");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("FLOAT");
                b2.DataTerminal_();
                b2.RegExp("([-+]?([0-9]++(\\.[0-9]*+)?)|(\\.[0-9]++))");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("FLOAT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DOUBLE");
                b2.DataTerminal_();
                b2.RegExp("([-+]?([0-9]++(\\.[0-9]*+)?)|(\\.[0-9]++))");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("DOUBLE");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("F1");
                b2.DataTerminal_();
                b2.RegExp("[AB]");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("F2");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("DELIMITER");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("F3");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("DELIMITER");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EF1");
                b2.DataTerminal_();
                b2.RegExp("[AB]");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("CHAR");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EF2");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("DELIMITER");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("OptionalConcatenate1");
                b2.DataTerminal_();
                b2.RegExp(" concatenate");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChooseType1");
                b2.NonTerminal("TOKEN21");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChooseType2");
                b2.NonTerminal("TOKEN22");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CSVSimple1");
                b2.Concatenate_(7);
                b2.As_();
                b2.NonTerminal("STRING");
                b2.Name("AString");
                b2._As();
                b2.NonTerminal("TOKEN26");
                b2.As_();
                b2.NonTerminal("INT");
                b2.Name("AnInt");
                b2._As();
                b2.NonTerminal("TOKEN26");
                b2.As_();
                b2.NonTerminal("CHAR");
                b2.Name("AChar");
                b2._As();
                b2.NonTerminal("TOKEN26");
                b2.As_();
                b2.NonTerminal("DOUBLE");
                b2.Name("ADouble");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/TestGrammar1");
                b2.Namespace("org.whole.lang.language");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment7() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("Test1");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(29);
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("SingleLiteral");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("SinglePatternLiteral");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("LiteralSequence");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("SingleData");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DataSequence");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("F1");
                b0.SimpleName("f1");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("F2");
                b0.SimpleName("f2");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("F3");
                b0.SimpleName("f3");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DataSequenceWithDataTypes");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("EF1");
                b0.SimpleName("f1");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("EF2");
                b0.SimpleName("f2");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("EF2");
                b0.SimpleName("f3");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("OptionalLiteral");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("OptionalConcatenate");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("OptionalConcatenate1");
                b0.SimpleName("optionalConcatenate1");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("RepeatedLiteral");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("RepeatedOptionalLiteral");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("RepeatedUnboundedLiteral");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ChooseLiteral");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("ChoosePolymorphic");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.EnumEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ChooseEnum");
                b0.Types_(0);
                b0._Types();
                b0.EnumValues_(2);
                b0.EnumValue("DOG");
                b0.EnumValue("CAT");
                b0._EnumValues();
                b0._EnumEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CSVSimple");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("CSVSimple1");
                b0._CompositeEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("STRING");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CHAR");
                b0.Types_(0);
                b0._Types();
                b0.DataType("char");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("INT");
                b0.Types_(0);
                b0._Types();
                b0.DataType("int");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("FLOAT");
                b0.Types_(0);
                b0._Types();
                b0.DataType("float");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DOUBLE");
                b0.Types_(0);
                b0._Types();
                b0.DataType("double");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("F1");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("F2");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("F3");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("EF1");
                b0.Types_(0);
                b0._Types();
                b0.DataType("char");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("EF2");
                b0.Types_(0);
                b0._Types();
                b0.DataType("int");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("OptionalConcatenate1");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ChooseType1");
                b0.Types_(1);
                b0.SimpleName("ChoosePolymorphic");
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ChooseType2");
                b0.Types_(1);
                b0.SimpleName("ChoosePolymorphic");
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CSVSimple1");
                b0.Types_(0);
                b0._Types();
                b0.Features_(4);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("STRING");
                b0.SimpleName("AString");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("INT");
                b0.SimpleName("AnInt");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("CHAR");
                b0.SimpleName("AChar");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("DOUBLE");
                b0.SimpleName("ADouble");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.lang.language");
                b1.Resolver();
                b0.URI("http://lang.whole.org/Test1");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment8() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("DataTypesGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://tests.lang.whole.org/DataTypes");
                b2.Namespace("org.whole.tests.datatypesgrammar");
                b2.Name("DataTypes");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("DataTypes");
                b2.LiteralTerminal_();
                b2.RegExp("\\p{javaWhitespace}*");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(18);
                b2.Production_();
                b2.NonTerminal("BOOLEAN");
                b2.DataTerminal_();
                b2.RegExp("[tT]rue|[fF]alse");
                b2.Category("LITERAL");
                b2.Format("%b");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("INT");
                b2.DataTerminal_();
                b2.RegExp("([+-]?([0-9]+))");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DECIMAL");
                b2.DataTerminal_();
                b2.RegExp("([+-]?([0-9]++[\\.,][0-9]*+)|([\\.,][0-9]++))");
                b2.Category("LITERAL");
                b2.Format("%f");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ISO_DATETIME");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-5][0-9]:[0-2][0-9]:[0-5][0-9]\\.[0-9]{3}Z");
                b2.Category("LITERAL");
                b1.SameStageFragment_();
                b0.InvokeJavaClassMethod_();
                b0.Text("to extended iso date time");
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.util.StringUtils");
                b0.StringLiteral("toExtendedISO8601DateTime(java.util.Date)");
                b0.Expressions_(1);
                b0.Variable("self");
                b0._Expressions();
                b0._InvokeJavaClassMethod();
                b1._SameStageFragment();
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATE");
                b2.DataTerminal_();
                b2.RegExp("[0-3][0-9]/[01][0-9]/[0-9]{4}");
                b2.Category("LITERAL");
                b2.Format("%1$td/%1$tm/%1$tY");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("STRING");
                b2.DataTerminal_();
                b2.RegExp("[^\"]*+");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("εINDENT");
                b2.Empty_();
                b2.Literal("\t");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("εSP");
                b2.Empty_();
                b2.Literal(" ");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("εNL");
                b2.Empty_();
                b2.Literal("\n");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("DELIMITER");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp(";");
                b2.Category("DELIMITER");
                b2.Literal(";\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("x");
                b2.Category("DELIMITER");
                b2.Literal("x");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("one");
                b2.Category("DELIMITER");
                b2.Literal("one");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("two");
                b2.Category("DELIMITER");
                b2.Literal("two");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("three");
                b2.Category("DELIMITER");
                b2.Literal("three");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("\"");
                b2.Category("DELIMITER");
                b2.Literal("\"");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.Empty_();
                b1.SameStageFragment_();
                org.whole.lang.queries.builders.IQueriesBuilder b3 = (org.whole.lang.queries.builders.IQueriesBuilder) op.wGetBuilder(org.whole.lang.queries.reflect.QueriesLanguageKit.URI);
                b3.Choose_(2);
                b3.If_();
                b3.TypeTest("BooleanLiteral");
                b3.StringLiteral("\n\n\n");
                b3._If();
                b3.StringLiteral("");
                b3._Choose();
                b1._SameStageFragment();
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("DELIMITER");
                b2.Literal("\n}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(9);
                b2.Production_();
                b2.NonTerminal("DataTypes");
                b2.Concatenate_(4);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("εNL");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN1");
                b2.Concatenate_(3);
                b2.NonTerminal("εINDENT");
                b2.NonTerminal("DataType");
                b2.NonTerminal("TOKEN7");
                b2._Concatenate();
                b2._Repeat();
                b2.NonTerminal("TOKEN8");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EnumType");
                b2.Choose_(3);
                b2.As_();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("εSP");
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b2.Name("ONE");
                b2._As();
                b2.As_();
                b2.NonTerminal("TOKEN4");
                b2.Name("TWO");
                b2._As();
                b2.As_();
                b2.NonTerminal("TOKEN5");
                b2.Name("THREE");
                b2._As();
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("BooleanLiteral");
                b2.NonTerminal("BOOLEAN");
                b2.DataType("BOOLEAN");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DecimalLiteral");
                b2.NonTerminal("DECIMAL");
                b2.CustomDataType("java.math.BigDecimal");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DateTimeLiteral");
                b2.NonTerminal("ISO_DATETIME");
                b2.DataType("DATE");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DateLiteral");
                b2.NonTerminal("DATE");
                b2.DataType("DATE");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IntLiteral");
                b2.NonTerminal("INT");
                b2.DataType("LONG");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("StringLiteral");
                b2.NonTerminal("STRING");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DataType");
                b2.Choose_(7);
                b2.NonTerminal("EnumType");
                b2.NonTerminal("BooleanLiteral");
                b2.NonTerminal("DecimalLiteral");
                b2.NonTerminal("DateTimeLiteral");
                b2.NonTerminal("DateLiteral");
                b2.NonTerminal("IntLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN6");
                b2.NonTerminal("StringLiteral");
                b2.NonTerminal("TOKEN6");
                b2._Concatenate();
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://tests.whole.org/DataTypesGrammar");
                b2.Namespace("org.whole.tests.datatypesgrammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment9() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("DataTypes");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(9);
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DataTypes");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("DataType");
                b0._CompositeEntity();
                b0.EnumEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("EnumType");
                b0.Types_(1);
                b0.SimpleName("DataType");
                b0._Types();
                b0.EnumValues_(3);
                b0.EnumValue("ONE");
                b0.EnumValue("TWO");
                b0.EnumValue("THREE");
                b0._EnumValues();
                b0._EnumEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("BooleanLiteral");
                b0.Types_(1);
                b0.SimpleName("DataType");
                b0._Types();
                b0.DataType("boolean");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DecimalLiteral");
                b0.Types_(1);
                b0.SimpleName("DataType");
                b0._Types();
                b0.DataType("java.math.BigDecimal");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DateTimeLiteral");
                b0.Types_(1);
                b0.SimpleName("DataType");
                b0._Types();
                b0.DataType("java.util.Date");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DateLiteral");
                b0.Types_(1);
                b0.SimpleName("DataType");
                b0._Types();
                b0.DataType("java.util.Date");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("IntLiteral");
                b0.Types_(1);
                b0.SimpleName("DataType");
                b0._Types();
                b0.DataType("long");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("StringLiteral");
                b0.Types_(1);
                b0.SimpleName("DataType");
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("DataType");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.tests.datatypesgrammar");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0.URI("http://tests.lang.whole.org/DataTypes");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment10() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("MessagesGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://test.lang.whole.org/Messages");
                b2.Namespace("org.whole.tests.messagesgrammar");
                b2.Name("Messages");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Messages");
                b2.LiteralTerminal_();
                b2.RegExp("\\p{javaWhitespace}+");
                b2.Category("SEPARATOR");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b2.Productions_(6);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("hd:");
                b2.Category("DELIMITER");
                b2.Literal("hd:");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("b");
                b2.Category("DELIMITER");
                b2.Literal("b");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("\\|\\|");
                b2.Category("DELIMITER");
                b2.Literal("||");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("!!");
                b2.Category("DELIMITER");
                b2.Literal("!!\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("\\d.*");
                b2.Category("DELIMITER");
                b2.Literal("num");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("\\D.*");
                b2.Category("DELIMITER");
                b2.Literal("non_num");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(7);
                b2.Production_();
                b2.NonTerminal("Messages");
                b2.Repeat_();
                b2.Size(1);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Message");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Message");
                b2.Concatenate_(4);
                b2.When_();
                b2.Or_();
                b2.NonTerminal("TOKEN");
                b2.Not_();
                b2.NonTerminal("TOKEN1");
                b2._Not();
                b2._Or();
                b2.Concatenate_(2);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("Header");
                b2.Name("header");
                b2._As();
                b2._Concatenate();
                b2._When();
                b2.NonTerminal("TOKEN2");
                b2.As_();
                b2.NonTerminal("Body");
                b2.Name("body");
                b2._As();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Body");
                b2.Choose_(3);
                b2.When_();
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("NumericBody");
                b2._When();
                b2.When_();
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("NonNumericBody");
                b2._When();
                b2.NonTerminal("OtherBody");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NumericBody");
                b2.DataTerminal_();
                b2.RegExp("\\d+");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NonNumericBody");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("OtherBody");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Header");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://tests.whole.org/MessagesGrammar");
                b2.Namespace("org.whole.tests.messagesgrammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment11() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("Messages");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(7);
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Messages");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Message");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Message");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Header");
                b0.SimpleName("header");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Body");
                b0.SimpleName("body");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("Body");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NumericBody");
                b0.Types_(1);
                b0.SimpleName("Body");
                b0._Types();
                b0.DataType("int");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NonNumericBody");
                b0.Types_(1);
                b0.SimpleName("Body");
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("OtherBody");
                b0.Types_(1);
                b0.SimpleName("Body");
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Header");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.tests.messagesgrammar");
                b1.Resolver();
                b0.URI("http://test.lang.whole.org/Messages");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment12() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("StateMachineGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://tests.lang.whole.org/StateMachine");
                b2.Namespace("org.whole.tests.statemachinegrammar");
                b2.Name("StateMachine");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("StateMachine");
                b2.LiteralTerminal_();
                b2.RegExp("[ \\n\\r\\t]*");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("NL");
                b2.Empty_();
                b2.Literal("\n");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SP");
                b2.Empty_();
                b2.Literal(" ");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("INDENT");
                b2.Empty_();
                b2.Literal("\t");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("events");
                b2.Category("DELIMITER");
                b2.Literal("events");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("end");
                b2.Category("DELIMITER");
                b2.Literal("end");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("resetEvents");
                b2.Category("DELIMITER");
                b2.Literal("resetEvents");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("commands");
                b2.Category("DELIMITER");
                b2.Literal("commands");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("state");
                b2.Category("DELIMITER");
                b2.Literal("state");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("actions");
                b2.Category("DELIMITER");
                b2.Literal("actions");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("DELIMITER");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("DELIMITER");
                b2.Literal("}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp("=>");
                b2.Category("DELIMITER");
                b2.Literal("=>");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("StateMachine");
                b2.Concatenate_(10);
                b2.Split_();
                b2.ByDelimiter_();
                b2.RegExp("end");
                b2._ByDelimiter();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("Events");
                b2.Name("events");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.Split_();
                b2.ByDelimiter_();
                b2.RegExp("end");
                b2._ByDelimiter();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("ResetEvents");
                b2.Name("resetEvents");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.Split_();
                b2.ByDelimiter_();
                b2.RegExp("end");
                b2._ByDelimiter();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("Commands");
                b2.Name("commands");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("States");
                b2.Name("states");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("State");
                b2.Concatenate_(3);
                b2.Split_();
                b2.ByDelimiter_();
                b2.RegExp("end");
                b2._ByDelimiter();
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("SP");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("NL");
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Actions");
                b2.Name("actions");
                b2._As();
                b2._Optional();
                b2.As_();
                b2.NonTerminal("Transitions");
                b2.Name("transitions");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Transition");
                b2.Concatenate_(7);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("event");
                b2._As();
                b2.NonTerminal("SP");
                b2.NonTerminal("TOKEN8");
                b2.NonTerminal("SP");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("state");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ID");
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z][a-zA-Z0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Event");
                b2.Concatenate_(5);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("code");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Events");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Event");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ResetEvents");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.Concatenate_(3);
                b2.NonTerminal("INDENT");
                b2.NonTerminal("ID");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Command");
                b2.Concatenate_(5);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("code");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Commands");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Command");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("States");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("State");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Actions");
                b2.Concatenate_(7);
                b2.NonTerminal("INDENT");
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("SP");
                b2.NonTerminal("TOKEN6");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("SP");
                b2.NonTerminal("ID");
                b2._Repeat();
                b2.NonTerminal("TOKEN7");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Transitions");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Transition");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://tests.lang.whole.org/StateMachineGrammar");
                b2.Namespace("org.whole.tests.statemachinegrammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment13() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("StateMachine");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(12);
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("StateMachine");
                b0.Types_(0);
                b0._Types();
                b0.Features_(4);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Events");
                b0.SimpleName("events");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ResetEvents");
                b0.SimpleName("resetEvents");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Commands");
                b0.SimpleName("commands");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("States");
                b0.SimpleName("states");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("State");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Actions");
                b0.SimpleName("actions");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Transitions");
                b0.SimpleName("transitions");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Transition");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("event");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("state");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ID");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Event");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("code");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Events");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Event");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ResetEvents");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("ID");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Command");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("code");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Commands");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Command");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("States");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("State");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Actions");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("ID");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Transitions");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Transition");
                b0._CompositeEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.tests.statemachinegrammar");
                b1.Resolver();
                b0.URI("http://tests.lang.whole.org/StateMachine");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment14() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("StateMachineGramar2");
                b2.LanguageDescriptor_();
                b2.URI("http://tests.lang.whole.org/StateMachine2");
                b2.Namespace("org.whole.tests.statemachine2grammar");
                b2.Name("StateMachine2");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("StateMachine");
                b2.LiteralTerminal_();
                b2.RegExp("[ \\n\\r\\t]*");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("NL");
                b2.Empty_();
                b2.Literal("\n");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SP");
                b2.Empty_();
                b2.Literal(" ");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("INDENT");
                b2.Empty_();
                b2.Literal("\t");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("events");
                b2.Category("DELIMITER");
                b2.Literal("events");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("end");
                b2.Category("DELIMITER");
                b2.Literal("end");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("resetEvents");
                b2.Category("DELIMITER");
                b2.Literal("resetEvents");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("commands");
                b2.Category("DELIMITER");
                b2.Literal("commands");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("state");
                b2.Category("DELIMITER");
                b2.Literal("state");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("actions");
                b2.Category("DELIMITER");
                b2.Literal("actions");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("DELIMITER");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("DELIMITER");
                b2.Literal("}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp("=>");
                b2.Category("DELIMITER");
                b2.Literal("=>");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("StateMachine");
                b2.Concatenate_(16);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("Events");
                b2.Name("events");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("ResetEvents");
                b2.Name("resetEvents");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("Commands");
                b2.Name("commands");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("States");
                b2.Name("states");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("State");
                b2.Concatenate_(8);
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("SP");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("NL");
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Actions");
                b2.Name("actions");
                b2._As();
                b2._Optional();
                b2.As_();
                b2.NonTerminal("Transitions");
                b2.Name("transitions");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Transition");
                b2.Concatenate_(7);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("event");
                b2._As();
                b2.NonTerminal("SP");
                b2.NonTerminal("TOKEN8");
                b2.NonTerminal("SP");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("state");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ID");
                b2.When_();
                b2.Not_();
                b2.NonTerminal("TOKEN1");
                b2._Not();
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z][a-zA-Z0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._When();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Event");
                b2.Concatenate_(5);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("code");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Events");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Event");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ResetEvents");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.Concatenate_(3);
                b2.NonTerminal("INDENT");
                b2.NonTerminal("ID");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Command");
                b2.Concatenate_(5);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("code");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Commands");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Command");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("States");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("State");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Actions");
                b2.Concatenate_(7);
                b2.NonTerminal("INDENT");
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("SP");
                b2.NonTerminal("TOKEN6");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("SP");
                b2.NonTerminal("ID");
                b2._Repeat();
                b2.NonTerminal("TOKEN7");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Transitions");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Transition");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://tests.lang.whole.org/StateMachine2Grammar");
                b2.Namespace("org.whole.tests.statemachine2grammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment15() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("StateMachine2");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(12);
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("StateMachine");
                b0.Types_(0);
                b0._Types();
                b0.Features_(4);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Events");
                b0.SimpleName("events");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ResetEvents");
                b0.SimpleName("resetEvents");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Commands");
                b0.SimpleName("commands");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("States");
                b0.SimpleName("states");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("State");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Actions");
                b0.SimpleName("actions");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Transitions");
                b0.SimpleName("transitions");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Transition");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("event");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("state");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ID");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Event");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("code");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Events");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Event");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ResetEvents");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("ID");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Command");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ID");
                b0.SimpleName("code");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Commands");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Command");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("States");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("State");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Actions");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("ID");
                b0._CompositeEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Transitions");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Transition");
                b0._CompositeEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.tests.statemachine2grammar");
                b1.Resolver();
                b0.URI("http://tests.lang.whole.org/StateMachine2");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment16() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("FamilyGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://oslo.examples.whole.org/Family");
                b2.Namespace("org.whole.examples.familygrammar");
                b2.Name("Family");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Persons");
                b2.LiteralTerminal_();
                b2.RegExp("[ \\n\\r\\t]*");
                b2.Category("SEPARATOR");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b2.Productions_(5);
                b2.Production_();
                b2.NonTerminal("Name");
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z]+");
                b2.Category("SEPARATOR");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp(",");
                b2.Category("DELIMITER");
                b2.Literal(", ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("DELIMITER");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("DELIMITER");
                b2.Literal("}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp(";");
                b2.Category("DELIMITER");
                b2.Literal(";");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(4);
                b2.Production_();
                b2.NonTerminal("Persons");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("Person");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("First");
                b2.NonTerminal("Name");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Last");
                b2.NonTerminal("Name");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Person");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("First");
                b2.Name("first");
                b2._As();
                b2.As_();
                b2.NonTerminal("Last");
                b2.Name("last");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.Concatenate_(4);
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("Persons");
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b2.Name("children");
                b2._As();
                b2._Optional();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/FamilyGrammar");
                b2.Namespace("org.whole.examples.familygrammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment17() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("Family");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(4);
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Persons");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Person");
                b0._CompositeEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("First");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Last");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Person");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("First");
                b0.SimpleName("first");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Last");
                b0.SimpleName("last");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Persons");
                b0.SimpleName("children");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.examples.familygrammar");
                b1.Resolver();
                b0.URI("http://oslo.examples.whole.org/Family");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment18() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("MT3Grammar");
                b2.LanguageDescriptor_();
                b2.URI("http://test.whole.org/MT3");
                b2.Namespace("org.whole.examples.mt3grammar");
                b2.Name("MT3");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Message");
                b1.Resolver();
                b2.Productions_(6);
                b2.Production_();
                b2.NonTerminal("LINE_SEPARATOR");
                b2.LiteralTerminal_();
                b2.RegExp("\\r\\n|[\\n\\r\\u2028\\u2029\\u0085]");
                b2.Category("SEPARATOR");
                b2.Literal("\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("MSG_SEPARATOR");
                b2.LiteralTerminal_();
                b2.RegExp(",(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])");
                b2.Category("SEPARATOR");
                b2.Literal(",\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("LITERAL");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("LITERAL");
                b2.Literal("}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{20:\\E");
                b2.Category("LITERAL");
                b2.Literal("{20:");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{30:\\E");
                b2.Category("LITERAL");
                b2.Literal("{30:");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(13);
                b2.Production_();
                b2.NonTerminal("Message");
                b2.Concatenate_(5);
                b2.As_();
                b2.NonTerminal("Header");
                b2.Name("header");
                b2._As();
                b2.NonTerminal("LINE_SEPARATOR");
                b2.As_();
                b2.NonTerminal("Body");
                b2.Name("body");
                b2._As();
                b2.NonTerminal("LINE_SEPARATOR");
                b2.As_();
                b2.NonTerminal("Trailer");
                b2.Name("trailer");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Header");
                b2.Concatenate_(4);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("Date");
                b2.Name("date");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Decimal18");
                b2.Name("totAmount");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Body");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("MSG_SEPARATOR");
                b2.NonTerminal("BodyElement");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("BodyElement");
                b2.Choose_(2);
                b2.NonTerminal("Msg1");
                b2.NonTerminal("Msg2");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Msg1");
                b2.Concatenate_(4);
                b2.NonTerminal("TOKEN2");
                b2.As_();
                b2.NonTerminal("Bic");
                b2.Name("bic");
                b2._As();
                b2.As_();
                b2.NonTerminal("Decimal18");
                b2.Name("amount");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Msg2");
                b2.Concatenate_(5);
                b2.NonTerminal("TOKEN3");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.As_();
                b2.NonTerminal("DateOfBidth");
                b2.Name("dateOfBidth");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Decimal18");
                b2.Name("amount");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Trailer");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("NofMsg");
                b2.Name("nofMsg");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Decimal18");
                b2.Split_();
                b2.BySize(18);
                b2.DataTerminal_();
                b2.RegExp("[ 0-9,.]*");
                b2.Category("LITERAL");
                b2.Format("%18s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("DOUBLE");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Date");
                b2.Split_();
                b2.BySize(6);
                b2.DataTerminal_();
                b2.RegExp("[0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Bic");
                b2.Split_();
                b2.BySize(11);
                b2.DataTerminal_();
                b2.RegExp("[0-9A-Z]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.Split_();
                b2.BySize(20);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%-20s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DateOfBidth");
                b2.Split_();
                b2.BySize(6);
                b2.DataTerminal_();
                b2.RegExp("[0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NofMsg");
                b2.Split_();
                b2.BySize(2);
                b2.DataTerminal_();
                b2.RegExp("[0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/MT3Grammar");
                b2.Namespace("org.whole.examples.mt3grammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment19() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("MT3");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(13);
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Message");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Header");
                b0.SimpleName("header");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Body");
                b0.SimpleName("body");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Trailer");
                b0.SimpleName("trailer");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Header");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Date");
                b0.SimpleName("date");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Decimal18");
                b0.SimpleName("totAmount");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Body");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("BodyElement");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("BodyElement");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Msg1");
                b0.Types_(1);
                b0.SimpleName("BodyElement");
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Bic");
                b0.SimpleName("bic");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Decimal18");
                b0.SimpleName("amount");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Msg2");
                b0.Types_(1);
                b0.SimpleName("BodyElement");
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("DateOfBidth");
                b0.SimpleName("dateOfBidth");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Decimal18");
                b0.SimpleName("amount");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Trailer");
                b0.Types_(0);
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("NofMsg");
                b0.SimpleName("nofMsg");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Decimal18");
                b0.Types_(0);
                b0._Types();
                b0.DataType("double");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Date");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Bic");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Name");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DateOfBidth");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NofMsg");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.examples.mt3grammar");
                b1.Resolver();
                b0.URI("http://test.whole.org/MT3");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment20() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("XmlGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/Xml");
                b2.Namespace("org.whole.lang.xml");
                b2.Name("Xml");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Document");
                b2.LiteralTerminal_();
                b2.RegExp("\\p{javaWhitespace}*");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(23);
                b2.Production_();
                b2.NonTerminal("QS");
                b2.DataTerminal_();
                b2.RegExp("[^\"]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NCNAME");
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z][_a-zA-Z0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("STRING");
                b2.DataTerminal_();
                b2.RegExp("(?s).*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SP");
                b2.LiteralTerminal_();
                b2.RegExp("\\p{javaWhitespace}+");
                b2.Category("SEPARATOR");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q<?xml\\E");
                b2.Category("DELIMITER");
                b2.Literal("<?xml");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.Empty_();
                b2.Literal(" ");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("version");
                b2.Category("DELIMITER");
                b2.Literal("version");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("=");
                b2.Category("DELIMITER");
                b2.Literal("=");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("\"");
                b2.Category("DELIMITER");
                b2.Literal("\"");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("encoding");
                b2.Category("DELIMITER");
                b2.Literal("encoding");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("standalone");
                b2.Category("DELIMITER");
                b2.Literal("standalone");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q?>\\E");
                b2.Category("DELIMITER");
                b2.Literal("?>");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.Empty_();
                b2.Literal("\n");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN9");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q<!DOCTYPE\\E");
                b2.Category("DELIMITER");
                b2.Literal("<!DOCTYPE");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN10");
                b2.LiteralTerminal_();
                b2.RegExp(">");
                b2.Category("DELIMITER");
                b2.Literal(">");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN11");
                b2.LiteralTerminal_();
                b2.RegExp("<");
                b2.Category("DELIMITER");
                b2.Literal("<");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN12");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q</\\E");
                b2.Category("DELIMITER");
                b2.Literal("</");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN13");
                b2.LiteralTerminal_();
                b2.RegExp(":");
                b2.Category("DELIMITER");
                b2.Literal(":");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN14");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q<![CDATA[\\E");
                b2.Category("DELIMITER");
                b2.Literal("<![CDATA[");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN15");
                b2.LiteralTerminal_();
                b2.RegExp("]]>");
                b2.Category("DELIMITER");
                b2.Literal("]]>");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN16");
                b2.LiteralTerminal_();
                b2.RegExp("<!--");
                b2.Category("DELIMITER");
                b2.Literal("<!--");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN17");
                b2.LiteralTerminal_();
                b2.RegExp("-->");
                b2.Category("DELIMITER");
                b2.Literal("-->");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN18");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q<?\\E");
                b2.Category("DELIMITER");
                b2.Literal("<?");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(31);
                b2.Production_();
                b2.NonTerminal("Document");
                b2.Concatenate_(2);
                b2.As_();
                b2.NonTerminal("Prolog");
                b2.Name("prolog");
                b2._As();
                b2.As_();
                b2.NonTerminal("Element");
                b2.Name("element");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Element");
                b2.Concatenate_(8);
                b2.NonTerminal("TOKEN11");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("tag");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Attributes");
                b2.Name("attributes");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN10");
                b2.As_();
                b2.NonTerminal("IContent");
                b2.Name("content");
                b2._As();
                b2.NonTerminal("TOKEN12");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("tag");
                b2._As();
                b2.NonTerminal("TOKEN10");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IName");
                b2.Choose_(2);
                b2.NonTerminal("Name");
                b2.NonTerminal("QualifiedName");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IContent");
                b2.Choose_(6);
                b2.NonTerminal("Element");
                b2.NonTerminal("CharData");
                b2.NonTerminal("CDataSect");
                b2.NonTerminal("Comment");
                b2.NonTerminal("PI");
                b2.NonTerminal("Content");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IMisc");
                b2.Choose_(2);
                b2.NonTerminal("PI");
                b2.NonTerminal("Comment");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Version");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Encoding");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Standalone");
                b2.DataTerminal_();
                b2.RegExp("yes|no");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("BOOLEAN");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("XMLDecl");
                b2.Concatenate_(12);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.As_();
                b2.NonTerminal("Version");
                b2.Name("version");
                b2._As();
                b2.NonTerminal("TOKEN4");
                b2.Optional_();
                b2.As_();
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("Encoding");
                b2.NonTerminal("TOKEN4");
                b2._Concatenate();
                b2.Name("encoding");
                b2._As();
                b2._Optional();
                b2.Optional_();
                b2.As_();
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("TOKEN6");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("Standalone");
                b2.NonTerminal("TOKEN4");
                b2._Concatenate();
                b2.Name("standalone");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("TOKEN7");
                b2.NonTerminal("TOKEN8");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SystemLiteral");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SystemId");
                b2.Concatenate_(1);
                b2.As_();
                b2.NonTerminal("SystemLiteral");
                b2.Name("systemLiteral");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("PubidLiteral");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("PublicId");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("PubidLiteral");
                b2.Name("pubidLiteral");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("SystemLiteral");
                b2.Name("systemLiteral");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IExternalId");
                b2.Choose_(2);
                b2.NonTerminal("SystemId");
                b2.NonTerminal("PublicId");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DocTypeDecl");
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN9");
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("name");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.Concatenate_(2);
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("IExternalId");
                b2._Concatenate();
                b2.Name("externalId");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN10");
                b2.NonTerminal("TOKEN8");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Misc");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN8");
                b2.NonTerminal("IMisc");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Prolog");
                b2.Concatenate_(3);
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("XMLDecl");
                b2.Name("xmlDecl");
                b2._As();
                b2._Optional();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("DocTypeDecl");
                b2.Name("docTypeDecl");
                b2._As();
                b2._Optional();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Misc");
                b2.Name("misc");
                b2._As();
                b2._Optional();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Value");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Attribute");
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.As_();
                b2.NonTerminal("Value");
                b2.Name("value");
                b2._As();
                b2.NonTerminal("TOKEN4");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Attributes");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Attribute");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.NonTerminal("NCNAME");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NameSpace");
                b2.NonTerminal("NCNAME");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("QualifiedName");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("NameSpace");
                b2.Name("nameSpace");
                b2._As();
                b2.NonTerminal("TOKEN13");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CharData");
                b2.DataTerminal_();
                b2.RegExp("[^<]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CDataSectData");
                b2.NonTerminal("STRING");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CDataSect");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN14");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("CDataSectData");
                b2._Repeat();
                b2.NonTerminal("TOKEN15");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CommentText");
                b2.NonTerminal("STRING");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Comment");
                b2.As_();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN16");
                b2.NonTerminal("CommentText");
                b2.NonTerminal("TOKEN17");
                b2._Concatenate();
                b2.Name("text");
                b2._As();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Instruction");
                b2.NonTerminal("STRING");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("PI");
                b2.Concatenate_(5);
                b2.NonTerminal("TOKEN18");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("Instruction");
                b2.Name("instruction");
                b2._As();
                b2.NonTerminal("TOKEN7");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Content");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN8");
                b2.NonTerminal("IContent");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/XmlGrammar");
                b2.Namespace("org.whole.lang.xml");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment21() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("Xml");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(31);
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Document");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Prolog");
                b0.SimpleName("prolog");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Element");
                b0.SimpleName("element");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Element");
                b0.Types_(1);
                b0.SimpleName("IContent");
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("IName");
                b0.SimpleName("tag");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Attributes");
                b0.SimpleName("attributes");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("IContent");
                b0.SimpleName("content");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("IName");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("IContent");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("IMisc");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Version");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Encoding");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Standalone");
                b0.Types_(0);
                b0._Types();
                b0.DataType("boolean");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("XMLDecl");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Version");
                b0.SimpleName("version");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Encoding");
                b0.SimpleName("encoding");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Standalone");
                b0.SimpleName("standalone");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("SystemLiteral");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("SystemId");
                b0.Types_(1);
                b0.SimpleName("IExternalId");
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("SystemLiteral");
                b0.SimpleName("systemLiteral");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("PubidLiteral");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("PublicId");
                b0.Types_(1);
                b0.SimpleName("IExternalId");
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("PubidLiteral");
                b0.SimpleName("pubidLiteral");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("SystemLiteral");
                b0.SimpleName("systemLiteral");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(1);
                b0.EntityModifier("abstract");
                b0._EntityModifiers();
                b0.SimpleName("IExternalId");
                b0.Types_(0);
                b0._Types();
                b0.Features_(0);
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DocTypeDecl");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("IName");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("IExternalId");
                b0.SimpleName("externalId");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Misc");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("IMisc");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Prolog");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("XMLDecl");
                b0.SimpleName("xmlDecl");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("DocTypeDecl");
                b0.SimpleName("docTypeDecl");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(1);
                b0.FeatureModifier("optional");
                b0._FeatureModifiers();
                b0.SimpleName("Misc");
                b0.SimpleName("misc");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Value");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Attribute");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("IName");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Value");
                b0.SimpleName("value");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Attributes");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Attribute");
                b0._CompositeEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Name");
                b0.Types_(1);
                b0.SimpleName("IName");
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("NameSpace");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("QualifiedName");
                b0.Types_(1);
                b0.SimpleName("IName");
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("NameSpace");
                b0.SimpleName("nameSpace");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CharData");
                b0.Types_(1);
                b0.SimpleName("IContent");
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CDataSectData");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CDataSect");
                b0.Types_(1);
                b0.SimpleName("IContent");
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("CDataSectData");
                b0._CompositeEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CommentText");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Comment");
                b0.Types_(2);
                b0.SimpleName("IContent");
                b0.SimpleName("IMisc");
                b0._Types();
                b0.Features_(1);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("CommentText");
                b0.SimpleName("text");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Instruction");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("PI");
                b0.Types_(2);
                b0.SimpleName("IContent");
                b0.SimpleName("IMisc");
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("IName");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Instruction");
                b0.SimpleName("instruction");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Content");
                b0.Types_(1);
                b0.SimpleName("IContent");
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("IContent");
                b0._CompositeEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.lang.xml");
                b1.Resolver();
                b0.URI("http://lang.whole.org/Xml");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment22() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("DTAUSGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://xsd.dataintegration.examples.whole.org/DTAUS");
                b2.Namespace("org.whole.examples.dtaus");
                b2.Name("DTAUS");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("DTAUS");
                b2.LiteralTerminal_();
                b2.RegExp("");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(16);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("0128");
                b2.Category("DELIMITER");
                b2.Literal("0128");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("A");
                b2.Category("DELIMITER");
                b2.Literal("A");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("00000000");
                b2.Category("DELIMITER");
                b2.Literal("00000000");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("    ");
                b2.Category("DELIMITER");
                b2.Literal("    ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("               ");
                b2.Category("DELIMITER");
                b2.Literal("               ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("                        ");
                b2.Category("DELIMITER");
                b2.Literal("                        ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("C");
                b2.Category("DELIMITER");
                b2.Literal("C");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp(" ");
                b2.Category("DELIMITER");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp("   ");
                b2.Category("DELIMITER");
                b2.Literal("   ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN9");
                b2.LiteralTerminal_();
                b2.RegExp("        ");
                b2.Category("DELIMITER");
                b2.Literal("        ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN10");
                b2.LiteralTerminal_();
                b2.RegExp("  ");
                b2.Category("DELIMITER");
                b2.Literal("  ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN11");
                b2.LiteralTerminal_();
                b2.RegExp("           ");
                b2.Category("DELIMITER");
                b2.Literal("           ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN12");
                b2.LiteralTerminal_();
                b2.RegExp("            ");
                b2.Category("DELIMITER");
                b2.Literal("            ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN13");
                b2.LiteralTerminal_();
                b2.RegExp("E");
                b2.Category("DELIMITER");
                b2.Literal("E");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN14");
                b2.LiteralTerminal_();
                b2.RegExp("     ");
                b2.Category("DELIMITER");
                b2.Literal("     ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN15");
                b2.LiteralTerminal_();
                b2.RegExp("                                                   ");
                b2.Category("DELIMITER");
                b2.Literal("                                                   ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(24);
                b2.Production_();
                b2.NonTerminal("DTAUS");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("ARecord");
                b2.Name("header");
                b2._As();
                b2.As_();
                b2.NonTerminal("CRecords");
                b2.Name("body");
                b2._As();
                b2.As_();
                b2.NonTerminal("ERecord");
                b2.Name("footer");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ARecord");
                b2.Concatenate_(14);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("TransactionKind");
                b2.Name("transactionKind");
                b2._As();
                b2.As_();
                b2.NonTerminal("SNumber");
                b2.Name("bankID");
                b2._As();
                b2.NonTerminal("TOKEN2");
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("customerName");
                b2._As();
                b2.As_();
                b2.NonTerminal("SDate");
                b2.Name("currentDate");
                b2._As();
                b2.NonTerminal("TOKEN3");
                b2.As_();
                b2.NonTerminal("LNumber");
                b2.Name("accountNo");
                b2._As();
                b2.As_();
                b2.NonTerminal("RefType");
                b2.Name("refNo");
                b2._As();
                b2.NonTerminal("TOKEN4");
                b2.As_();
                b2.NonTerminal("FDate");
                b2.Name("executionDate");
                b2._As();
                b2.NonTerminal("TOKEN5");
                b2.As_();
                b2.NonTerminal("Currency");
                b2.Name("currency");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CRecords");
                b2.Repeat_();
                b2.Size(1);
                b2.Size(9999999);
                b1.Resolver();
                b2.NonTerminal("CRecord");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CRecord");
                b2.Concatenate_(26);
                b2.As_();
                b2.NonTerminal("Size");
                b2.Name("recSize");
                b2._As();
                b2.NonTerminal("TOKEN6");
                b2.As_();
                b2.NonTerminal("SNumber");
                b2.Name("contractingBankID");
                b2._As();
                b2.As_();
                b2.NonTerminal("SNumber");
                b2.Name("targetBankID");
                b2._As();
                b2.As_();
                b2.NonTerminal("LNumber");
                b2.Name("targetAccountNo");
                b2._As();
                b2.As_();
                b2.NonTerminal("InternalID");
                b2.Name("internalCustomerID");
                b2._As();
                b2.As_();
                b2.NonTerminal("TransactionType");
                b2.Name("transactionType");
                b2._As();
                b2.NonTerminal("TOKEN7");
                b2.As_();
                b2.NonTerminal("AMNumber");
                b2.Name("dmAmount");
                b2._As();
                b2.As_();
                b2.NonTerminal("SNumber");
                b2.Name("bankID");
                b2._As();
                b2.As_();
                b2.NonTerminal("LNumber");
                b2.Name("accountNo");
                b2._As();
                b2.As_();
                b2.NonTerminal("AMNumber");
                b2.Name("euroAmount");
                b2._As();
                b2.NonTerminal("TOKEN8");
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("targetCustomerName");
                b2._As();
                b2.NonTerminal("TOKEN9");
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("customerName");
                b2._As();
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("purpose");
                b2._As();
                b2.As_();
                b2.NonTerminal("Currency");
                b2.Name("currency");
                b2._As();
                b2.NonTerminal("TOKEN10");
                b2.As_();
                b2.NonTerminal("VSNumber");
                b2.Name("expansionRecNo");
                b2._As();
                b2.As_();
                b2.NonTerminal("ExpansionType");
                b2.Name("expansionType1");
                b2._As();
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("expansion1");
                b2._As();
                b2.As_();
                b2.NonTerminal("ExpansionType");
                b2.Name("expansionType2");
                b2._As();
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("expansion2");
                b2._As();
                b2.NonTerminal("TOKEN11");
                b2.As_();
                b2.NonTerminal("ExpansionRecords");
                b2.Name("expansionRecords");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ExpansionRecords");
                b2.Repeat_();
                b2.Size(0);
                b2.Size(99);
                b1.Resolver();
                b2.NonTerminal("ExpansionRecord");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ExpansionRecord");
                b2.Concatenate_(9);
                b2.As_();
                b2.NonTerminal("ExpansionType");
                b2.Name("expansionType1");
                b2._As();
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("expansion1");
                b2._As();
                b2.As_();
                b2.NonTerminal("ExpansionType");
                b2.Name("expansionType2");
                b2._As();
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("expansion2");
                b2._As();
                b2.As_();
                b2.NonTerminal("ExpansionType");
                b2.Name("expansionType3");
                b2._As();
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("expansion3");
                b2._As();
                b2.As_();
                b2.NonTerminal("ExpansionType");
                b2.Name("expansionType4");
                b2._As();
                b2.As_();
                b2.NonTerminal("Chars");
                b2.Name("expansion4");
                b2._As();
                b2.NonTerminal("TOKEN12");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ERecord");
                b2.Concatenate_(9);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("TOKEN13");
                b2.NonTerminal("TOKEN14");
                b2.As_();
                b2.NonTerminal("RecordNumber");
                b2.Name("bodyLength");
                b2._As();
                b2.As_();
                b2.NonTerminal("STotal");
                b2.Name("dmTotal");
                b2._As();
                b2.As_();
                b2.NonTerminal("LTotal");
                b2.Name("accountTotal");
                b2._As();
                b2.As_();
                b2.NonTerminal("LTotal");
                b2.Name("bankTotal");
                b2._As();
                b2.As_();
                b2.NonTerminal("STotal");
                b2.Name("euroTotal");
                b2._As();
                b2.NonTerminal("TOKEN15");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TransactionKind");
                b2.DataTerminal_();
                b2.RegExp("[GL][BK]");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SNumber");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{8}");
                b2.Category("LITERAL");
                b2.Format("%08d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Chars");
                b2.DataTerminal_();
                b2.RegExp(".{27}");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SDate");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{6}");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("LNumber");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{10}");
                b2.Category("LITERAL");
                b2.Format("%010d");
                b2._DataTerminal();
                b2.DataType("LONG");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("RefType");
                b2.DataTerminal_();
                b2.RegExp(".{10}");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("FDate");
                b2.DataTerminal_();
                b2.RegExp("(([0-9]{8})|([ ]{8}))");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Currency");
                b2.DataTerminal_();
                b2.RegExp("[ 1]");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Size");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{4}");
                b2.Category("LITERAL");
                b2.Format("%04d");
                b2._DataTerminal();
                b2.DataType("SHORT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("InternalID");
                b2.DataTerminal_();
                b2.RegExp(".{13}");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TransactionType");
                b2.DataTerminal_();
                b2.RegExp("((04000)|(05000)|(05005)|(05006)|(05015)|(51000)|(53000)|(54[0-9][0-9]J)|(56000))");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("AMNumber");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{11}");
                b2.Category("LITERAL");
                b2.Format("%011d");
                b2._DataTerminal();
                b2.DataType("LONG");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("VSNumber");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{2}");
                b2.Category("LITERAL");
                b2.Format("%02d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ExpansionType");
                b2.DataTerminal_();
                b2.RegExp("((  )|(01)|(02)|(03))");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("RecordNumber");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{7}");
                b2.Category("LITERAL");
                b2.Format("%07d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("STotal");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{13}");
                b2.Category("LITERAL");
                b2.Format("%013d");
                b2._DataTerminal();
                b2.DataType("LONG");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("LTotal");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{17}");
                b2.Category("LITERAL");
                b2.Format("%017d");
                b2._DataTerminal();
                b2.DataType("LONG");
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/DTAUSGrammar");
                b2.Namespace("org.whole.examples.dtaus");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment23() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("DTAUS");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(24);
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("DTAUS");
                b0.Types_(0);
                b0._Types();
                b0.Features_(3);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ARecord");
                b0.SimpleName("header");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("CRecords");
                b0.SimpleName("body");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ERecord");
                b0.SimpleName("footer");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ARecord");
                b0.Types_(0);
                b0._Types();
                b0.Features_(8);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("TransactionKind");
                b0.SimpleName("transactionKind");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("SNumber");
                b0.SimpleName("bankID");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("customerName");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("SDate");
                b0.SimpleName("currentDate");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("LNumber");
                b0.SimpleName("accountNo");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("RefType");
                b0.SimpleName("refNo");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("FDate");
                b0.SimpleName("executionDate");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Currency");
                b0.SimpleName("currency");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CRecords");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("CRecord");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("CRecord");
                b0.Types_(0);
                b0._Types();
                b0.Features_(20);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Size");
                b0.SimpleName("recSize");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("SNumber");
                b0.SimpleName("contractingBankID");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("SNumber");
                b0.SimpleName("targetBankID");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("LNumber");
                b0.SimpleName("targetAccountNo");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("InternalID");
                b0.SimpleName("internalCustomerID");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("TransactionType");
                b0.SimpleName("transactionType");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("AMNumber");
                b0.SimpleName("dmAmount");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("SNumber");
                b0.SimpleName("bankID");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("LNumber");
                b0.SimpleName("accountNo");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("AMNumber");
                b0.SimpleName("euroAmount");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("targetCustomerName");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("customerName");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("purpose");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Currency");
                b0.SimpleName("currency");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("VSNumber");
                b0.SimpleName("expansionRecNo");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ExpansionType");
                b0.SimpleName("expansionType1");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("expansion1");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ExpansionType");
                b0.SimpleName("expansionType2");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("expansion2");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ExpansionRecords");
                b0.SimpleName("expansionRecords");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ExpansionRecords");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("ExpansionRecord");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ExpansionRecord");
                b0.Types_(0);
                b0._Types();
                b0.Features_(8);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ExpansionType");
                b0.SimpleName("expansionType1");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("expansion1");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ExpansionType");
                b0.SimpleName("expansionType2");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("expansion2");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ExpansionType");
                b0.SimpleName("expansionType3");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("expansion3");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("ExpansionType");
                b0.SimpleName("expansionType4");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Chars");
                b0.SimpleName("expansion4");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ERecord");
                b0.Types_(0);
                b0._Types();
                b0.Features_(5);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("RecordNumber");
                b0.SimpleName("bodyLength");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("STotal");
                b0.SimpleName("dmTotal");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("LTotal");
                b0.SimpleName("accountTotal");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("LTotal");
                b0.SimpleName("bankTotal");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("STotal");
                b0.SimpleName("euroTotal");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("TransactionKind");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("SNumber");
                b0.Types_(0);
                b0._Types();
                b0.DataType("int");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Chars");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("SDate");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("LNumber");
                b0.Types_(0);
                b0._Types();
                b0.DataType("long");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("RefType");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("FDate");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Currency");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Size");
                b0.Types_(0);
                b0._Types();
                b0.DataType("short");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("InternalID");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("TransactionType");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("AMNumber");
                b0.Types_(0);
                b0._Types();
                b0.DataType("long");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("VSNumber");
                b0.Types_(0);
                b0._Types();
                b0.DataType("int");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("ExpansionType");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("RecordNumber");
                b0.Types_(0);
                b0._Types();
                b0.DataType("int");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("STotal");
                b0.Types_(0);
                b0._Types();
                b0.DataType("long");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("LTotal");
                b0.Types_(0);
                b0._Types();
                b0.DataType("long");
                b0._DataEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.examples.dtaus");
                b1.Resolver();
                b0.URI("http://xsd.dataintegration.examples.whole.org/DTAUS");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment24() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("MotoGP_TeamsCSVGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://dataintegration.examples.whole.org/MotoGP");
                b2.Namespace("org.whole.examples.motogpteams");
                b2.Name("MotoGP");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Teams");
                b1.Resolver();
                b2.Productions_(2);
                b2.Production_();
                b2.NonTerminal("NL");
                b2.LiteralTerminal_();
                b2.RegExp("\\r\\n|[\\n\\r\\u2028\\u2029\\u0085]");
                b1.Resolver();
                b2.Literal("\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SEP");
                b2.LiteralTerminal_();
                b2.RegExp(";");
                b2.Category("DELIMITER");
                b2.Literal(";");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(5);
                b2.Production_();
                b2.NonTerminal("Teams");
                b2.Repeat_();
                b2.Size(2);
                b2.Unbounded();
                b2.NonTerminal("NL");
                b2.NonTerminal("Team");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Rider");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("SEP");
                b2.As_();
                b2.NonTerminal("Number");
                b2.Name("number");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z0-9 ]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Number");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Team");
                b2.Concatenate_(7);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("SEP");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("manufacturer");
                b2._As();
                b2.NonTerminal("SEP");
                b2.As_();
                b2.NonTerminal("Rider");
                b2.Name("rider1");
                b2._As();
                b2.NonTerminal("SEP");
                b2.As_();
                b2.NonTerminal("Rider");
                b2.Name("rider2");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/MotoGPTeamsCSVGrammar");
                b2.Namespace("org.whole.examples.motogpteams");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment25() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("MotoGP");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(5);
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Teams");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Team");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Rider");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("name");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Number");
                b0.SimpleName("number");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Name");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Number");
                b0.Types_(0);
                b0._Types();
                b0.DataType("int");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Team");
                b0.Types_(0);
                b0._Types();
                b0.Features_(4);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("manufacturer");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Rider");
                b0.SimpleName("rider1");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Rider");
                b0.SimpleName("rider2");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.examples.motogpteams");
                b1.Resolver();
                b0.URI("http://dataintegration.examples.whole.org/MotoGP");
                b0._Model();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment26() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("MotoGP_TeamsFLFGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://dataintegration.examples.whole.org/MotoGP");
                b2.Namespace("org.whole.examples.motogpteams");
                b2.Name("MotoGP");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Teams");
                b1.Resolver();
                b2.Productions_(0);
                b2._Productions();
                b2.Productions_(5);
                b2.Production_();
                b2.NonTerminal("Teams");
                b2.Repeat_();
                b2.Size(2);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Team");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Rider");
                b2.Concatenate_(2);
                b2.Split_();
                b2.BySize(28);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2._Split();
                b2.Split_();
                b2.BySize(2);
                b2.As_();
                b2.NonTerminal("Number");
                b2.Name("number");
                b2._As();
                b2._Split();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.DataTerminal_();
                b2.RegExp("(([ ]?[a-zA-Z0-9]+)*)[ ]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Number");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("LITERAL");
                b2.Format("%02d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Team");
                b2.Split_();
                b2.BySize(100);
                b2.Concatenate_(4);
                b2.Split_();
                b2.BySize(30);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2._Split();
                b2.Split_();
                b2.BySize(10);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("manufacturer");
                b2._As();
                b2._Split();
                b2.As_();
                b2.NonTerminal("Rider");
                b2.Name("rider1");
                b2._As();
                b2.As_();
                b2.NonTerminal("Rider");
                b2.Name("rider2");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/MotoGPTeamsFLFGrammar");
                b2.Namespace("org.whole.examples.motogpteams");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newFragment27() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.models.builders.IModelsBuilder b0 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b0.Model_();
                b0.SimpleName("MotoGP");
                b0.TypeRelations_(0);
                b0._TypeRelations();
                b0.ModelDeclarations_(5);
                b0.CompositeEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Teams");
                b0.Types_(0);
                b0._Types();
                b0.ComponentModifiers_(1);
                b0.ComponentModifier("ordered");
                b0._ComponentModifiers();
                b0.SimpleName("Team");
                b0._CompositeEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Rider");
                b0.Types_(0);
                b0._Types();
                b0.Features_(2);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("name");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Number");
                b0.SimpleName("number");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Name");
                b0.Types_(0);
                b0._Types();
                b0.DataType("String");
                b0._DataEntity();
                b0.DataEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Number");
                b0.Types_(0);
                b0._Types();
                b0.DataType("int");
                b0._DataEntity();
                b0.SimpleEntity_();
                b0.EntityModifiers_(0);
                b0._EntityModifiers();
                b0.SimpleName("Team");
                b0.Types_(0);
                b0._Types();
                b0.Features_(4);
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("name");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Name");
                b0.SimpleName("manufacturer");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Rider");
                b0.SimpleName("rider1");
                b1.Resolver();
                b0._Feature();
                b0.Feature_();
                b0.FeatureModifiers_(0);
                b0._FeatureModifiers();
                b0.SimpleName("Rider");
                b0.SimpleName("rider2");
                b1.Resolver();
                b0._Feature();
                b0._Features();
                b0._SimpleEntity();
                b0._ModelDeclarations();
                b0.Namespace("org.whole.examples.motogpteams");
                b1.Resolver();
                b0.URI("http://dataintegration.examples.whole.org/MotoGP");
                b0._Model();
            }
        };
    }
}
