import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.Status;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

//import org.apache.maven.shared.invoker.*;
//import org.apache.maven.cli.MavenCli;

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r"

    
//	classpath "org.apache.maven.shared:maven-invoker:2.2"

//	classpath "org.apache.maven:maven-embedder:3.3.3"
//	classpath "org.eclipse.aether:aether-connector-basic:1.0.2.v20150114"
//	classpath "org.eclipse.aether:aether-transport-wagon:1.0.2.v20150114"
//	classpath "org.apache.maven.wagon:wagon-http:2.8"
//	classpath "org.apache.maven.wagon:wagon-provider-api:2.8"
//	classpath "org.apache.httpcomponents:httpcore:4.4"
  }
}

ext {
	relengDir = project.projectDir.absolutePath
	repoDir = "${relengDir}/.."
	reposDir = "${repoDir}/.."

	repo = new FileRepositoryBuilder().setWorkTree(new File(repoDir)).build()

	versionNum = "1.0.0"
	versionNumOld = "1.0.0"

	failure = false

	sourceExcludes = ".git/**, */bin/**, */builds/**, */target/**, **/.DS_Store, */.gradle/**"

	lastCommitVersion = { ->
		def lastCommitDate = new Git(repo).log().setMaxCount(1).call().iterator().next().getAuthorIdent().getWhen()
	
		def dateFormat = new java.text.SimpleDateFormat("yyyyMMdd-HHmm")
		def suffix = dateFormat.format(lastCommitDate)
	
		"${versionNum}.v${suffix}"
	}
	fullVersion = lastCommitVersion()
	buildArtifactsDir = "${relengDir}/builds/${fullVersion}"

	repoStatus = new Git(repo).status().call()
	hasUncommittedChanges = !repoStatus.getUncommittedChanges().isEmpty() || !repoStatus.getUntracked().isEmpty()
	existsBuildArtifactsDir = new File(buildArtifactsDir).exists()

	launchMaven = { String pomDir, String pomName, List<String> goals ->
		def arguments = ['-Dtycho.localArtifacts=ignore', "-f"+pomName]
		arguments.addAll(goals)

		def result = exec {
			ignoreExitValue = true
			workingDir = pomDir
			executable = "mvn"
			args = arguments
		}
		if (result.getExitValue() != 0)
			failure = true
	}
/*	
	launchMaven = { String pomDir, String pomName, List<String> goals ->
		//FIXME missing property
		def request = new DefaultInvocationRequest()
		request.setPomFile(new File(new File(pomDir), pomName))
		request.setGoals(goals)

		def invoker = new DefaultInvoker()
		def result = invoker.execute(request)
		if (result.getExitCode() != 0)
			failure = true
	}

	launchMaven = { String pomDir, String pomName, List<String> goals ->
		//FIXME workaround
		System.setProperty("maven.multiModuleProjectDirectory", pomDir)
		System.setProperty("tycho.localArtifacts", "ignore")
		def cli = new MavenCli()
		def arguments = []
		arguments.add("-f"+pomName)
		arguments.addAll(goals)

		def execResult = cli.doMain(arguments as String[], pomDir, System.out, System.err);
		if (execResult != 0)
			failure = true
	}
*/

	ignoreFailure = { ->
		failure = false;
	}
}

project.gradle.buildFinished { buildResult ->
	def execTasks = project.tasks.findAll { it.state.executed }
	
	def buildFailure = buildResult.getFailure()
	
	if (buildFailure == null && !failure) {
		println("Completed without errors")
	} else if (buildFailure != null ) {
		println("Error thrown during build ${buildFailure.message}")
	} else {
		println("Completed with failure")
	}
}

task info << {
	println("relengDir: ${relengDir}")
	println("Version: ${fullVersion}")
	println("Has uncommitted changes: ${hasUncommittedChanges}")
}

task init_build << {
	ant.mkdir(dir: buildArtifactsDir)
}
