<?xml version="1.0"?>
<project name="whole" default="build" basedir=".">
	<property environment="env" />
	<condition property="maven.home" value="${env.M2_HOME}" else="${M2_HOME}">
		<isset property="${env.M2_HOME}"/>
	</condition>
	<property name="releng.dir" value="." />
	<property name="repo.dir" value=".." />
	<property name="repos.dir" value="../.." />
	<property name="version.num" value="1.0.0" />
	<property name="version.num.old" value="1.0.0" />

	<macrodef name="maven">
		<attribute name="options" default="" />
		<attribute name="goal" />
		<attribute name="basedir" />
		<attribute name="resultproperty" default="maven.result" />
		<element name="args" implicit="true" optional="true" />
		<sequential>
			<java classname="org.codehaus.classworlds.Launcher" fork="true" dir="@{basedir}" resultproperty="@{resultproperty}">
				<jvmarg value="-Xmx512m" />
				<jvmarg value="-Djava.net.useSystemProxies=false" />
				<jvmarg value="-Dtycho.localArtifacts=ignore" />
				<classpath>
					<fileset dir="${maven.home}/boot">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${maven.home}/lib">
						<include name="*.jar" />
					</fileset>
				</classpath>
				<sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${maven.home}" />
				<arg line="--batch-mode @{options} @{goal}" />
			</java>
		</sequential>
	</macrodef>

	<target name="init_version" unless="version">
		<exec executable="git" outputproperty="commit.date.iso" failifexecutionfails="false" errorproperty="">
			<arg value="log" />
			<arg value="-1" />
			<arg value="--format=%cd" />
			<arg value="--date=iso" />
		</exec>

		<script language="javascript">
		  project.setProperty('commit.version',
			project.getProperty('commit.date.iso').replace(/[-:]/g, '').replace(' ', '-').substr(0, "13"));
		</script>

		<property name="version" value="${version.num}.v${commit.version}" />
	</target>

	<target name="set_build_version" depends="init_version">
		<replace dir="${repo.dir}" token="${version.num.old}.qualifier" value="${version}" summary="on">
			<include name="*/META-INF/MANIFEST.MF" />
			<include name="*/feature.xml" />
			<include name="*/category.xml" />
			<include name="*/*.product" />
		</replace>
		<replace dir="${repo.dir}" token="${version.num.old}-SNAPSHOT" value="${version}" summary="on">
			<include name="*/pom-e4-lw.xml" />
			<include name="*/pom-lw.xml" />
			<include name="*/pom-ldk.xml" />
		</replace>
	</target>
	<target name="set_meta_version" depends="init_version">
		<replace dir="${repo.dir}" token="${version}" value="${version.num}.qualifier" summary="on">
			<include name="*/META-INF/MANIFEST.MF" />
			<include name="*/feature.xml" />
			<include name="*/category.xml" />
			<include name="*/*.product" />
		</replace>
		<replace dir="${repo.dir}" token="${version}" value="${version.num}-SNAPSHOT" summary="on">
			<include name="*/pom-e4-lw.xml" />
			<include name="*/pom-lw.xml" />
			<include name="*/pom-ldk.xml" />
		</replace>
	</target>

	<target name="init_build" depends="init_version">
		<property name="build.dir" value="${releng.dir}/builds/${version}" />
		<mkdir dir="${build.dir}" />
	</target>
	<target name="init_release" depends="init_version">
		<available file="${releng.dir}/builds/${version}" type="dir" property="build.dir" value="${releng.dir}/builds/${version}" />
	</target>

	<target name="zip_whole_sources" depends="init_build">
		<zip destfile="${build.dir}/whole-${version}.zip">
			<zipfileset prefix="whole" dir="${repo.dir}" excludes=".git/**, */bin/**, */builds/**, */target/**, **/.DS_Store" defaultexcludes="no" />
		</zip>
	</target>
	<target name="zip_examples_sources" depends="init_build">
		<zip destfile="${build.dir}/whole-examples-${version}.zip">
			<zipfileset prefix="whole-examples" dir="${repos.dir}/whole-examples" excludes=".git/**, */bin/**, */target/**, **/.DS_Store" defaultexcludes="no" />
		</zip>
	</target>

	<target name="clean_e4_lw">
		<maven basedir="${releng.dir}" options="-fpom-e4-lw.xml" goal="clean" />
		<delete dir="${releng.dir}/workspace" />
	</target>
	<target name="package_e4_lw" unless="failure">
		<maven basedir="${releng.dir}" options="-fpom-e4-lw.xml" goal="package" resultproperty="package_e4_lw.result" />
		<condition property="failure">
			<not>
				<equals arg1="${package_e4_lw.result}" arg2="0" />
			</not>
		</condition>
	</target>
	<target name="move_e4_lw_products" depends="init_build">
		<move todir="${build.dir}">
			<fileset dir="${repo.dir}/org.whole.product.e4.lw.repository/target" includes="whole-*.zip" />
			<fileset dir="${repo.dir}/org.whole.product.e4.lw.product/target/products" includes="whole-*" />
			<firstmatchmapper>
				<globmapper from="whole*.gtk.x86_64.tar.gz" to="whole-e4-lw*.tar.gz" />
				<globmapper from="whole*macosx.cocoa.x86_64.tar.gz" to="whole-e4-lw*osx.tar.gz" />
				<globmapper from="whole*32.win32.x86_64.zip" to="whole-e4-lw*dows.zip" />
				<globmapper from="whole-*.zip" to="whole-e4-*.zip" />
			</firstmatchmapper>
		</move>
	</target>
	<target name="build_e4_lw" depends="package_e4_lw" unless="failure" description="Build Whole Language Workbench e4">
		<antcall target="move_e4_lw_products" />
		<antcall target="clean_e4_lw" />
	</target>

	<target name="clean_lw">
		<maven basedir="${releng.dir}" options="-fpom-lw.xml" goal="clean" />
		<delete dir="${releng.dir}/workspace" />
	</target>
	<target name="package_lw" unless="failure">
		<maven basedir="${releng.dir}" options="-fpom-lw.xml" goal="package" resultproperty="package_lw.result" />
		<condition property="failure">
			<not>
				<equals arg1="${package_lw.result}" arg2="0" />
			</not>
		</condition>
	</target>
	<target name="move_lw_products" depends="init_build">
		<move todir="${build.dir}">
			<fileset dir="${repo.dir}/org.whole.product.lw.repository/target" includes="whole-*.zip" />
			<fileset dir="${repo.dir}/org.whole.product.lw.product/target/products" includes="whole-*" />
			<firstmatchmapper>
				<globmapper from="whole*.gtk.x86_64.tar.gz" to="whole-lw*.tar.gz" />
				<globmapper from="whole*macosx.cocoa.x86_64.tar.gz" to="whole-lw*osx.tar.gz" />
				<globmapper from="whole*32.win32.x86_64.zip" to="whole-lw*dows.zip" />
				<identitymapper />
			</firstmatchmapper>
		</move>
	</target>
	<target name="build_lw" depends="package_lw" unless="failure">
		<antcall target="move_lw_products" />
		<antcall target="clean_lw" />
	</target>

	<target name="clean_ldk">
		<maven basedir="${releng.dir}" options="-fpom-ldk.xml" goal="clean" />
	</target>
	<target name="package_ldk" unless="failure">
		<maven basedir="${releng.dir}" options="-fpom-ldk.xml" goal="package" resultproperty="package_ldk.result" />
		<condition property="failure">
			<not>
				<equals arg1="${package_ldk.result}" arg2="0" />
			</not>
		</condition>
	</target>
	<target name="build_ldk" depends="package_ldk" unless="failure">
		<antcall target="clean_ldk" />
	</target>

	<target name="clean" depends="clean_e4_lw, clean_lw, clean_ldk" description="Clean">
		<delete dir="${releng.dir}/builds" />
	</target>

	<target name="package" depends="clean, package_e4_lw, package_lw, package_ldk" />

	<target name="build" depends="zip_whole_sources, zip_examples_sources, set_build_version, build_lw, build_ldk, set_meta_version" description="Generates all distribution archives" />

	<target name="release_lw" depends="init_release" description="Release the Whole Language Workbench">
		<fail unless="build.dir" message="Missing build to release on sourceforge" />

		<property name="frs.dir" value="/home/frs/project/whole" />

		<unzip src="${build.dir}/whole-${version}.zip" dest="${build.dir}">
			<patternset>
				<include name="whole/org.whole.products.releng/readme.txt" />
			</patternset>
			<flattenmapper />
		</unzip>
		<exec executable="rsync" failonerror="true">
			<arg line="-ave ssh ${build.dir}/readme.txt riccardo_solmi@frs.sourceforge.net:${frs.dir}" />
		</exec>
		<delete file="${build.dir}/readme.txt" />

		<delete file="${build.dir}/.DS_Store" quiet="true" />
		<exec executable="rsync" failonerror="true">
			<arg line="-ave ssh ${build.dir} riccardo_solmi@frs.sourceforge.net:${frs.dir}/builds" />
		</exec>

		<unzip src="${build.dir}/whole-updatesite-${version}.zip" dest="${build.dir}/${version}" />
		<exec executable="rsync" failonerror="true">
			<arg line="-ave ssh ${build.dir}/${version} riccardo_solmi@frs.sourceforge.net:${frs.dir}/updates" />
		</exec>
		<delete dir="${build.dir}/${version}" />
	</target>

	<target name="release_ldk" depends="clean" description="Release the Whole Language Development Kit">
		<antcall target="set_build_version" />
		<maven basedir="${releng.dir}" options="-fpom-ldk.xml" goal="deploy" />
		<antcall target="set_meta_version" />

		<antcall target="clean_ldk" />
	</target>

	<target name="release_ldk_local" depends="clean">
		<antcall target="set_build_version" />
		<maven basedir="${releng.dir}" options="-fpom-ldk.xml" goal="install" />
		<antcall target="set_meta_version" />

		<antcall target="clean_ldk" />
	</target>

	<target name="test" description="Test the Whole Language Workbench">
		<maven basedir="${releng.dir}" options="-fpom-lw.xml" goal="integration-test"/>
	</target>
</project>
