apply from: "common.gradle"

def validateLdk = false

task set_build_version { description 'set the build version' } << {
	ant.replace(dir: repoDir, token: versionNumOld+".qualifier", value: fullVersion, summary: true) {
		include(name: "*/META-INF/MANIFEST.MF")
		include(name: "*/feature.xml")
		include(name: "*/category.xml")
		include(name: "*/*.product")
	}
	
	ant.replace(dir: repoDir, token: versionNumOld+"-SNAPSHOT", value: fullVersion, summary: true) {
		include(name: "*/pom-e4-lw.xml")
		include(name: "*/pom-lw.xml")
		include(name: "*/pom-ldk.xml")
	}
}

task set_meta_version { description 'set the meta version' } << {
	ant.replace(dir: repoDir, token: fullVersion, value: versionNum+".qualifier", summary: true) {
		include(name: "*/META-INF/MANIFEST.MF")
		include(name: "*/feature.xml")
		include(name: "*/category.xml")
		include(name: "*/*.product")
	}
	
	ant.replace(dir: repoDir, token: fullVersion, value: versionNum+"-SNAPSHOT", summary: true) {
		include(name: "*/pom-e4-lw.xml")
		include(name: "*/pom-lw.xml")
		include(name: "*/pom-ldk.xml")
	}
}

task zip_whole_sources(dependsOn: init_build) << {
	ant.zip(destfile: "${buildArtifactsDir}/whole-${fullVersion}.zip") {
		zipfileset(prefix: "whole", dir: "${repoDir}", excludes: sourceExcludes, defaultexcludes: "no")
	}
}

task zip_examples_sources(dependsOn: init_build) << {
	ant.zip(destfile: "${buildArtifactsDir}/whole-examples-${fullVersion}.zip") {
		zipfileset(prefix: "whole-examples", dir: "${reposDir}/whole-examples", excludes: sourceExcludes, defaultexcludes: "no")
	}
}


def clean_e4_lw = { ->
	launchMaven(relengDir, "pom-e4-lw.xml", ["clean"])
	ant.delete(dir: "${relengDir}/workspace")
}

task package_e4_lw  << {
	launchMaven(relengDir, "pom-e4-lw.xml", ["package"])
}
package_e4_lw.onlyIf { !failure }

task build_e4_lw(dependsOn: [init_build, package_e4_lw]) << {
	ant.move(toDir: buildArtifactsDir) {
		fileset(dir: "${repoDir}/org.whole.product.e4.lw.repository/target", includes: "whole-*.zip")
		fileset(dir: "${repoDir}/org.whole.product.e4.lw.product/target/products", includes: "whole-*")
		firstmatchmapper {
			globmapper(from: "whole*.gtk.x86_64.tar.gz",to: "whole-e4-lw*.tar.gz")
			globmapper(from: "whole*macosx.cocoa.x86_64.tar.gz", to: "whole-e4-lw*osx.tar.gz")
			globmapper(from: "whole*32.win32.x86_64.zip", to: "whole-e4-lw*dows.zip")
			globmapper(from: "whole-*.zip", to: "whole-e4-*.zip")
		}
	}

	clean_e4_lw()
} 
build_e4_lw.onlyIf { !failure } 

def clean_lw = { ->
	launchMaven("${relengDir}", "pom-lw.xml", ["clean"])
	ant.delete(dir: "${relengDir}/workspace")
}

task package_lw(dependsOn: set_build_version) << {
	launchMaven("${relengDir}", "pom-lw.xml", ["package"])
}
package_lw.onlyIf { !failure && (!existsBuildArtifactsDir || hasUncommittedChanges) }
package_lw.finalizedBy set_meta_version

task build_lw(dependsOn:[init_build, package_lw]) << {
	ant.move(toDir: buildArtifactsDir, failonerror:false) {
		fileset(dir: "${repoDir}/org.whole.product.lw.repository/target", includes: "whole-*.zip")
		fileset(dir: "${repoDir}/org.whole.product.lw.product/target/products", includes: "whole-*")
		firstmatchmapper {
			globmapper(from:"whole*.gtk.x86_64.tar.gz"          , to:"whole-lw*.tar.gz")
			globmapper(from:"whole*macosx.cocoa.x86_64.tar.gz"  , to:"whole-lw*osx.tar.gz")
			globmapper(from:"whole*32.win32.x86_64.zip"         , to:"whole-lw*dows.zip")
			identitymapper()
		}
	}
	ant.delete(dir: "${relengDir}/whole-updates")
	ant.unzip(src: "${buildArtifactsDir}/whole-updatesite-${fullVersion}.zip", dest: "${relengDir}/whole-updates")

	clean_lw();
}
build_lw.onlyIf { !failure }

def clean_ldk = { ->
	launchMaven(relengDir, "pom-ldk.xml", ["clean"])
}

task package_ldk(dependsOn: set_build_version) << {
	launchMaven(relengDir, "pom-ldk.xml", ["package"])
}
package_ldk.onlyIf { !failure && validateLdk }
package_ldk.finalizedBy set_meta_version

task build_ldk(dependsOn: package_ldk) << {
	launchMaven(relengDir, "pom-ldk.xml", ["clean"])
}
build_ldk.onlyIf { !failure && validateLdk }

task clean_updates(description:"Clean updates repository") << {
	ant.delete(dir: "${relengDir}/whole-updates")
}

task clean(description:"Clean") << {
	clean_e4_lw();
	ignoreFailure();
	clean_lw();
	ignoreFailure();
	clean_ldk();
	ant.delete(dir: "${relengDir}/builds")
	ant.delete(dir: "${relengDir}/whole-updates")
}

task build(dependsOn:[zip_whole_sources, zip_examples_sources, build_lw, build_ldk], description:"Generates all distribution archives")

task release_lw(description:"Release the Whole Language Workbench") << {
	def frsDir = "/home/frs/project/whole"	
		
	ant.unzip(src:"${buildArtifactsDir}/whole-${fullVersion}.zip", dest:"${buildArtifactsDir}") {
		patternset(includes:"whole/org.whole.products.releng/readme.txt")
		flattenmapper()
	}
	
	exec {
		executable "rsync"
		args "-ave ssh ${buildArtifactsDir}/readme.txt riccardo_solmi@frs.sourceforge.net:${frsDir}"
	}
	
	ant.delete(file:"${buildArtifactsDir}/readme.txt")
	ant.delete(file:"${buildArtifactsDir}/.DS_Store", quiet:"true" )
	
	exec {
		executable "rsync"
		args "-ave ssh ${buildArtifactsDir} riccardo_solmi@frs.sourceforge.net:${frsDir}/builds"
	}
	
	ant.unzip(src:"${buildArtifactsDir}/whole-updatesite-${fullVersion}.zip", dest:"${buildArtifactsDir}/${fullVersion}" )
	
	exec {
		executable "rsync"
		args "-ave ssh ${buildArtifactsDir}/${fullVersion} riccardo_solmi@frs.sourceforge.net:${frsDir}/updates"
	}
	
	ant.delete(dir:"${buildArtifactsDir}/${fullVersion}")
}
release_lw.onlyIf { existsBuildArtifactsDir }


task deploy_ldk(dependsOn: set_build_version) << {
	launchMaven(relengDir, "pom-ldk.xml", ["deploy"])
}
deploy_ldk.finalizedBy set_meta_version

task release_ldk(dependsOn:[clean, deploy_ldk], description:"Release the Whole Language Development Kit") << {
	clean_ldk();
} 
release_ldk.onlyIf { !failure }

task install_ldk(dependsOn: set_build_version) << {
	launchMaven(relengDir, "pom-ldk.xml", ["install"])
}
install_ldk.finalizedBy set_meta_version

task release_ldk_local(dependsOn:[clean, install_ldk], description:"Release the Whole Language Development Kit locally") << {
	clean_ldk();
}
release_ldk_local.onlyIf { !failure }

task integration_test(description:"Test the Whole Language Workbench") << {
	launchMaven(relengDir, "pom-lw.xml", ["integration-test"])
} 

task copy_update_site << {
	if (!new File(buildArtifactsDir).exists()) 
		throw new RuntimeException("Missing build folder")

	def productDir = hasProperty("productDir") ? getProperty("productDir") : null;	
		
	if (productDir == null || !new File(getProperty("productDir")).exists)
		throw new RuntimeException("Missing product folder")

	ant.copy(toDir:"${product.dir}") {
		fileset(dir: "${buildArtifactsDir}", includes: "whole-updatesite*.zip")
		firstmatchmapper {
			globmapper(from: "whole-updatesite*",to: "whole-lw-updatesite*")
			identitymapper()
		}
	}
}
copy_update_site.onlyIf { existsBuildArtifactsDir }

deploy_ldk.mustRunAfter clean
install_ldk.mustRunAfter clean
set_build_version.mustRunAfter zip_whole_sources
set_build_version.mustRunAfter zip_examples_sources
