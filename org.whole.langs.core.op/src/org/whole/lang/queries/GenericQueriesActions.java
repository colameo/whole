package org.whole.lang.queries;

import org.whole.lang.builders.IBuilderOperation;
import org.whole.lang.templates.AbstractTemplateFactory;

public class GenericQueriesActions extends AbstractTemplateFactory<org.whole.lang.actions.model.LanguageActionFactory> {

    public void apply(IBuilderOperation op) {
        org.whole.lang.actions.builders.IActionsBuilder b0 = (org.whole.lang.actions.builders.IActionsBuilder) op.wGetBuilder(org.whole.lang.actions.reflect.ActionsLanguageKit.URI);
        b0.LanguageActionFactory_();
        b0.URI("whole:org.whole.lang.queries:GenericQueriesActions");
        b0.Namespace("org.whole.lang.queries");
        b0.Name("Generic Queries Actions");
        org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
        b1.Resolver();
        b1.Resolver();
        b0.ToolbarActions_();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b0._ToolbarActions();
        b0.ContextMenuActions_();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(2);
        b0.GuardedAction_();
        b0.Label("Extract variable");
        org.whole.lang.queries.builders.IQueriesBuilder b2 = (org.whole.lang.queries.builders.IQueriesBuilder) op.wGetBuilder(org.whole.lang.queries.reflect.QueriesLanguageKit.URI);
        b2.Block_(10);
        b2.QueryDeclaration_();
        b2.Name("getVariableName");
        b2.Names_(5);
        b2.Name("toExtract");
        b2.Name("factory");
        b2.Name("fd");
        b2.Name("varName");
        b2.Name("featureName");
        b2._Names();
        b2.Block_(3);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("toExtract");
        b2._Filter();
        b1.SameStageFragment_();
        org.whole.lang.workflows.builders.IWorkflowsBuilder b3 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
        b3.Sequence_();
        b3.Text("get input from dialog");
        b3.FlowObjects_(4);
        b3.InvokeJavaClassMethod_();
        b3.Text("get dialog factory");
        b3.Variable("factory");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.workflows.ui.dialogs.ChangeValueDialogFactory");
        b3.StringLiteral("instance()");
        b1.Resolver();
        b3._InvokeJavaClassMethod();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get feature descriptor");
        b3.Variable("fd");
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.ParentStep();
        b2._Path();
        b1._SameStageFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wGetFeatureDescriptor(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b3.Variable("toExtract");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get feature name");
        b3.Variable("featureName");
        b3.Variable("fd");
        b1.Resolver();
        b3.StringLiteral("java.lang.Object");
        b3.StringLiteral("toString()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b3.Task_();
        b3.Text("get variable name");
        b3.Text("Insert your first name:");
        b3.Assignments_(1);
        b3.Assign_();
        b3.Variable("varName");
        b3.Variable("featureName");
        b3._Assign();
        b3._Assignments();
        b3.Variable("factory");
        b3._Task();
        b3._FlowObjects();
        b3._Sequence();
        b1._SameStageFragment();
        b2.VariableRefStep("varName");
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("getVariableDeclaration");
        b2.Names_(5);
        b2.Name("toExtract");
        b2.Name("varName");
        b2.Name("quantifierString");
        b2.Name("ed");
        b2.Name("quantifier");
        b2._Names();
        b2.Block_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("toExtract");
        b2._Filter();
        b1.SameStageFragment_();
        b3.Sequence_();
        b3.Text("create variable");
        b3.FlowObjects_(3);
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get entity descriptor");
        b3.Variable("ed");
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.ParentStep();
        b2._Path();
        b1._SameStageFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wGetEntityDescriptor(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b3.Variable("toExtract");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get quantifier value");
        b3.Variable("quantifier");
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Commons#Quantifier");
        b1.VarName("quantifierString");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wEnumValue()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaClassMethod_();
        b3.Text("create variable");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.commons.factories.CommonsEntityAdapterFactory");
        b3.StringLiteral("createVariable(org.whole.lang.reflect.EntityDescriptor, java.lang.String, org.whole.lang.reflect.EntityDescriptor, org.whole.lang.commons.model.QuantifierEnum$Value)");
        b3.Expressions_(4);
        b3.Variable("ed");
        b3.Variable("varName");
        b3.Variable("ed");
        b3.Variable("quantifier");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b3._FlowObjects();
        b3._Sequence();
        b1._SameStageFragment();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("hasConcreteType");
        b2.Names_(2);
        b2.Name("toExtract");
        b2.Name("ed");
        b2._Names();
        b2.Block_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("toExtract");
        b2._Filter();
        b1.SameStageFragment_();
        b3.Sequence_();
        b3.Text("create variable");
        b3.FlowObjects_(2);
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get entity descriptor");
        b3.Variable("ed");
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.ParentStep();
        b2._Path();
        b1._SameStageFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wGetEntityDescriptor(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b3.Variable("toExtract");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaClassMethod_();
        b3.Text("check if ed has data entity kind");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.util.EntityUtils");
        b3.StringLiteral("isData(org.whole.lang.reflect.EntityDescriptor)");
        b3.Expressions_(1);
        b3.Variable("ed");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b3._FlowObjects();
        b3._Sequence();
        b1._SameStageFragment();
        b2._Block();
        b2._QueryDeclaration();
        b2.Path_(5);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2.VariableTest("toExtract");
        b2._And();
        b2._Filter();
        b2.Filter_();
        b2.AncestorOrSelfStep();
        b2.SubtypeTest("http://lang.whole.org/Commons#Fragment");//WAS KindTest("FRAGMENT")
        b2._Filter();
        b2.Filter_();
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("http://lang.whole.org/Queries#Select");
        b2._Filter();
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("whereClause");
        b2.VariableTest("whereClause");
        b2._Filter();
        b2._Path();
        b2.Filter_();
        b2.Call_();
        b2.Name("getVariableName");
        b2.Expressions_(1);
        b2.VariableRefStep("toExtract");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("varName");
        b2._Filter();
        b2.Filter_();
        b2.Choose_(3);
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.VariableRefStep("toExtract");
        b2.KindTest("DATA");
        b2._Filter();
        b2._ExpressionTest();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Singleton_();
        b2.Call_();
        b2.Name("hasConcreteType");
        b2.Expressions_(1);
        b2.VariableRefStep("toExtract");
        b2._Expressions();
        b2._Call();
        b2._Singleton();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b2.Filter_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#Literal");
        b1.VarName("toExtract");
        b1.Quantifier("!");
        b1._Variable();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#VariableTest");
        b1.VarName("varName");
        b1.Quantifier("!");
        b1._Variable();
        b2._Filter();
        b1._StageUpFragment();
        b2._If();
        b2.Do_();
        b1.StageUpFragment_();
        b2.Filter_();
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Commons#Any");
        b1.VarName("toExtract");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#VariableTest");
        b1.VarName("varName");
        b1.Quantifier("!");
        b1._Variable();
        b2._Filter();
        b1._StageUpFragment();
        b2._Do();
        b2._Choose();
        b2._If();
        b2.If_();
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.IndexTest_();
        b2.IntLiteral(1);
        b2._IndexTest();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2.Select_();
        b1.StageUpFragment_();
        b2.Select_();
        b2.Filter_();
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Commons#Any");
        b1.VarName("filteredEntity");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#VariableTest");
        b1.VarName("varName");
        b1.Quantifier("!");
        b1._Variable();
        b2._Filter();
        b2.SelfStep();
        b2.Sequence_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#PathExpression");
        b1.VarName("patternDefinitions");
        b1.Quantifier("+");
        b1._Variable();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b1._StageUpFragment();
        b2.VariableRefStep("toExtract");
        b2.Sequence_(5);
        b2.Filter_();
        b1.StageUpFragment_();
        org.whole.lang.environment.builders.IEnvironmentBuilder b4 = (org.whole.lang.environment.builders.IEnvironmentBuilder) op.wGetBuilder(org.whole.lang.environment.reflect.EnvironmentLanguageKit.URI);
        b4.ContainmentTuple_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Commons#Any");
        b1.VarName("toExtract");
        b1.Quantifier("!");
        b1._Variable();
        b4._ContainmentTuple();
        b1._StageUpFragment();
        b2.VariableTest("filteredEntityTuple");
        b2._Filter();
        b2.Path_(2);
        b2.VariableRefStep("filteredEntityTuple");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2.VariableTest("initialEntity");
        b2._And();
        b2._Filter();
        b2._Path();
        b1.SameStageFragment_();
        b3.Sequence_();
        b3.Text("generate pattern from selection");
        b3.FlowObjects_(1);
        b3.ForeachLoop_();
        b3.Text("for each selected entity update filteredEntity");
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.IndexRangeTest_();
        b2.IntLiteral(1);
        b1.Resolver();
        b2._IndexRangeTest();
        b2._Filter();
        b2._Path();
        b1._SameStageFragment();
        b3.Variable("selectedEntity");
        b1.Resolver();
        b3.InvokeJavaClassMethod_();
        b3.Text("apply forced match");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.matchers.Matcher");
        b3.StringLiteral("forceMatchUsingVariables(org.whole.lang.model.IEntity, org.whole.lang.model.IEntity)");
        b3.Expressions_(2);
        b3.Variable("selectedEntity");
        b3.Variable("initialEntity");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b3._ForeachLoop();
        b3._FlowObjects();
        b3._Sequence();
        b1._SameStageFragment();
        b2.Path_(2);
        b2.VariableRefStep("filteredEntityTuple");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2.VariableTest("filteredEntity");
        b2._And();
        b2._Filter();
        b2._Path();
        b2.Path_(2);
        b1.SameStageFragment_();
        b3.InvokeJavaClassMethod_();
        b3.Text("extract pattern definitions");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.queries.util.QueriesHelpers");
        b3.StringLiteral("extractPatternDefinitions(org.whole.lang.model.IEntity, org.whole.lang.model.IEntity)");
        b3.Expressions_(2);
        b3.Variable("filteredEntity");
        b3.Variable("toExtract");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b1._SameStageFragment();
        b2.Filter_();
        b2.ChildStep();
        b2.VariableTest("patternDefinitions");
        b2._Filter();
        b2._Path();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._If();
        b2.Do_();
        b1.StageUpFragment_();
        b2.Select_();
        b2.Filter_();
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Commons#Any");
        b1.VarName("toExtract");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#VariableTest");
        b1.VarName("varName");
        b1.Quantifier("!");
        b1._Variable();
        b2._Filter();
        b2.SelfStep();
        b1.Resolver();
        b2.TemplateNames();
        b2._Select();
        b1._StageUpFragment();
        b2._Do();
        b2._Choose();
        b2.VariableTest("template");
        b2._Filter();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.VariableRefStep("whereClause");
        b2.KindTest("RESOLVER");
        b2._Filter();
        b2._ExpressionTest();
        b2.PointwiseUpdate_();
        b2.VariableRefStep("whereClause");
        b2.VariableRefStep("template");
        b2._PointwiseUpdate();
        b2._If();
        b2.Do_();
        b2.Sequence_(2);
        b2.If_();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.VariableRefStep("whereClause");
        b2.Or_(2);
        b2.TypeTest("http://lang.whole.org/Queries#Sequence");
        b2.TypeTest("http://lang.whole.org/Queries#Block");
        b2._Or();
        b2._Filter();
        b2._ExpressionTest();
        b2._Not();
        b2.PointwiseUpdate_();
        b2.VariableRefStep("whereClause");
        b1.StageUpFragment_();
        b2.Sequence_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#PathExpression");
        b1.VarName("whereClause");
        b1.Quantifier("!");
        b1._Variable();
        b2._Sequence();
        b1._StageUpFragment();
        b2._PointwiseUpdate();
        b2._If();
        b2.PointwiseInsert_();
        b2.Placement("INTO");
        b2.VariableRefStep("whereClause");
        b2.VariableRefStep("template");
        b2._PointwiseInsert();
        b2._Sequence();
        b2._Do();
        b2._Choose();
        b2.PointwiseUpdate_();
        b2.VariableRefStep("toExtract");
        b2.Call_();
        b2.Name("getVariableDeclaration");
        b2.Expressions_(3);
        b2.VariableRefStep("toExtract");
        b2.VariableRefStep("varName");
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.Filter_();
        b2.ParentStep();
        b2.KindTest("COMPOSITE");
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2.StringLiteral("?");
        b2._If();
        b2.Do_();
        b2.StringLiteral("!");
        b2._Do();
        b2._Choose();
        b2._Expressions();
        b2._Call();
        b2._PointwiseUpdate();
        b2.For_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexRangeTest_();
        b2.IntLiteral(1);
        b1.Resolver();
        b2._IndexRangeTest();
        b2.VariableTest("toDelete");
        b2._And();
        b2._Filter();
        b2._Path();
        b2.If_();
        b2.ExpressionTest_();
        b1.SameStageFragment_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("is contained in parent");
        b1.Resolver();
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.ParentStep();
        b2._Path();
        b1._SameStageFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wContains(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b3.Variable("toDelete");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b1._SameStageFragment();
        b2._ExpressionTest();
        b1.SameStageFragment_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("is contained in parent");
        b1.Resolver();
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.ParentStep();
        b2._Path();
        b1._SameStageFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wRemove(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b3.Variable("toDelete");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b1._SameStageFragment();
        b2._If();
        b2._For();
        b2.SelfStep();
        b2._Block();
        b2.And_(1);
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(4);
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.AncestorStep();
        b2.And_(2);
        b2.TypeTest("http://lang.whole.org/Commons#StageUpFragment");
        b2.ExpressionTest_();
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("http://lang.whole.org/Queries#Select");
        b2._Filter();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b2._ExpressionTest();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.ParentStep();
        b2.VariableTest("parent");
        b2._Filter();
        b2._ExpressionTest();
        b2.Or_(2);
        b2.And_(2);
        b2.ExpressionTest_();
        b2.Filter_();
        b2.VariableRefStep("parent");
        b2.KindTest("COMPOSITE");
        b2._Filter();
        b2._ExpressionTest();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexRangeTest_();
        b2.IntLiteral(1);
        b1.Resolver();
        b2._IndexRangeTest();
        b2.Not_();
        b2.ExpressionTest_();
        b2.PointwiseEquals_();
        b2.ParentStep();
        b2.VariableRefStep("parent");
        b2._PointwiseEquals();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.IndexTest_();
        b2.IntLiteral(1);
        b2._IndexTest();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2._Not();
        b2._Or();
        b2._And();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2._And();
        b0._GuardedAction();
        b0.GuardedAction_();
        b0.Label("Extract inline variable");
        b2.Block_(11);
        b2.QueryDeclaration_();
        b2.Name("getVariableName");
        b2.Names_(5);
        b2.Name("toExtract");
        b2.Name("factory");
        b2.Name("fd");
        b2.Name("varName");
        b2.Name("featureName");
        b2._Names();
        b2.Block_(3);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("toExtract");
        b2._Filter();
        b1.SameStageFragment_();
        b3.Sequence_();
        b3.Text("get input from dialog");
        b3.FlowObjects_(4);
        b3.InvokeJavaClassMethod_();
        b3.Text("get dialog factory");
        b3.Variable("factory");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.workflows.ui.dialogs.ChangeValueDialogFactory");
        b3.StringLiteral("instance()");
        b1.Resolver();
        b3._InvokeJavaClassMethod();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get feature descriptor");
        b3.Variable("fd");
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.ParentStep();
        b2._Path();
        b1._SameStageFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wGetFeatureDescriptor(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b3.Variable("toExtract");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get feature name");
        b3.Variable("featureName");
        b3.Variable("fd");
        b1.Resolver();
        b3.StringLiteral("java.lang.Object");
        b3.StringLiteral("toString()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b3.Task_();
        b3.Text("get variable name");
        b3.Text("Insert your first name:");
        b3.Assignments_(1);
        b3.Assign_();
        b3.Variable("varName");
        b3.Variable("featureName");
        b3._Assign();
        b3._Assignments();
        b3.Variable("factory");
        b3._Task();
        b3._FlowObjects();
        b3._Sequence();
        b1._SameStageFragment();
        b2.VariableRefStep("varName");
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("getVariableDeclaration");
        b2.Names_(5);
        b2.Name("toExtract");
        b2.Name("varName");
        b2.Name("quantifierString");
        b2.Name("ed");
        b2.Name("quantifier");
        b2._Names();
        b2.Block_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("toExtract");
        b2._Filter();
        b1.SameStageFragment_();
        b3.Sequence_();
        b3.Text("create variable");
        b3.FlowObjects_(3);
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get entity descriptor");
        b3.Variable("ed");
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.ParentStep();
        b2._Path();
        b1._SameStageFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wGetEntityDescriptor()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get quantifier value");
        b3.Variable("quantifier");
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Commons#Quantifier");
        b1.VarName("quantifierString");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wEnumValue()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaClassMethod_();
        b3.Text("create variable");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.commons.factories.CommonsEntityAdapterFactory");
        b3.StringLiteral("createCompositeVariable(org.whole.lang.reflect.EntityDescriptor, java.lang.String, org.whole.lang.reflect.EntityDescriptor, org.whole.lang.commons.model.QuantifierEnum$Value)");
        b3.Expressions_(4);
        b3.Variable("ed");
        b3.Variable("varName");
        b3.Variable("ed");
        b3.Variable("quantifier");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b3._FlowObjects();
        b3._Sequence();
        b1._SameStageFragment();
        b2._Block();
        b2._QueryDeclaration();
        b2.Path_(5);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2.VariableTest("toExtract");
        b2._And();
        b2._Filter();
        b2.Filter_();
        b2.AncestorOrSelfStep();
        b2.SubtypeTest("http://lang.whole.org/Commons#Fragment");//WAS KindTest("FRAGMENT")
        b2._Filter();
        b2.Filter_();
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("http://lang.whole.org/Queries#Select");
        b2._Filter();
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("whereClause");
        b2.VariableTest("whereClause");
        b2._Filter();
        b2._Path();
        b2.Filter_();
        b2.Call_();
        b2.Name("getVariableName");
        b2.Expressions_(1);
        b2.VariableRefStep("toExtract");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("varName");
        b2._Filter();
        b2.Path_(2);
        b2.VariableRefStep("toExtract");
        b2.Filter_();
        b2.ParentStep();
        b2.VariableTest("toExtractParent");
        b2._Filter();
        b2._Path();
        b2.Filter_();
        b1.StageUpFragment_();
        b2.Select_();
        b2.Filter_();
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Commons#Any");
        b1.VarName("toExtractParent");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#VariableTest");
        b1.VarName("varName");
        b1.Quantifier("!");
        b1._Variable();
        b2._Filter();
        b2.SelfStep();
        b1.Resolver();
        b2.TemplateNames();
        b2._Select();
        b1._StageUpFragment();
        b2.VariableTest("template");
        b2._Filter();
        b2.Path_(5);
        b2.VariableRefStep("template");
        b2.FeatureStep("selectClause");
        b2.FeatureStep("expression");
        b2.FeatureStep("rootEntity");
        b2.Sequence_(2);
        b2.Delete_();
        b2.ChildStep();
        b2._Delete();
        b2.CartesianInsert_();
        b2.Placement("INTO");
        b2.SelfStep();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.ChildStep();
        b2._Path();
        b2._CartesianInsert();
        b2._Sequence();
        b2._Path();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.VariableRefStep("whereClause");
        b2.KindTest("RESOLVER");
        b2._Filter();
        b2._ExpressionTest();
        b2.PointwiseUpdate_();
        b2.VariableRefStep("whereClause");
        b2.VariableRefStep("template");
        b2._PointwiseUpdate();
        b2._If();
        b2.Do_();
        b2.Sequence_(2);
        b2.If_();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.VariableRefStep("whereClause");
        b2.Or_(2);
        b2.TypeTest("http://lang.whole.org/Queries#Sequence");
        b2.TypeTest("http://lang.whole.org/Queries#Block");
        b2._Or();
        b2._Filter();
        b2._ExpressionTest();
        b2._Not();
        b2.PointwiseUpdate_();
        b2.VariableRefStep("whereClause");
        b1.StageUpFragment_();
        b2.Sequence_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Queries#PathExpression");
        b1.VarName("whereClause");
        b1.Quantifier("!");
        b1._Variable();
        b2._Sequence();
        b1._StageUpFragment();
        b2._PointwiseUpdate();
        b2._If();
        b2.PointwiseInsert_();
        b2.Placement("INTO");
        b2.VariableRefStep("whereClause");
        b2.VariableRefStep("template");
        b2._PointwiseInsert();
        b2._Sequence();
        b2._Do();
        b2._Choose();
        b2.PointwiseUpdate_();
        b2.VariableRefStep("toExtract");
        b2.Call_();
        b2.Name("getVariableDeclaration");
        b2.Expressions_(3);
        b2.VariableRefStep("toExtract");
        b2.VariableRefStep("varName");
        b2.StringLiteral("!");
        b2._Expressions();
        b2._Call();
        b2._PointwiseUpdate();
        b2.For_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexRangeTest_();
        b2.IntLiteral(1);
        b1.Resolver();
        b2._IndexRangeTest();
        b2.VariableTest("toDelete");
        b2._And();
        b2._Filter();
        b2._Path();
        b2.If_();
        b2.ExpressionTest_();
        b1.SameStageFragment_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("is contained in parent");
        b1.Resolver();
        b3.Variable("toExtractParent");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wContains(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b3.Variable("toDelete");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b1._SameStageFragment();
        b2._ExpressionTest();
        b1.SameStageFragment_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("is contained in parent");
        b1.Resolver();
        b3.Variable("toExtractParent");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wRemove(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b3.Variable("toDelete");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b1._SameStageFragment();
        b2._If();
        b2._For();
        b2.Sequence_(2);
        b2.VariableRefStep("toExtractParent");
        b2.SelfStep();
        b2._Sequence();
        b2._Block();
        b2.And_(1);
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(4);
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.AncestorStep();
        b2.And_(2);
        b2.TypeTest("http://lang.whole.org/Commons#StageUpFragment");
        b2.ExpressionTest_();
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("http://lang.whole.org/Queries#Select");
        b2._Filter();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b2._ExpressionTest();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.ParentStep();
        b2.And_(2);
        b2.KindTest("COMPOSITE");
        b2.VariableTest("parent");
        b2._And();
        b2._Filter();
        b2._ExpressionTest();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.VariableRefStep("selectedEntities");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexRangeTest_();
        b2.IntLiteral(1);
        b1.Resolver();
        b2._IndexRangeTest();
        b2.Not_();
        b2.ExpressionTest_();
        b2.PointwiseEquals_();
        b2.ParentStep();
        b2.VariableRefStep("parent");
        b2._PointwiseEquals();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2._And();
        b0._GuardedAction();
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b1.Resolver();
        b0._ContextMenuActions();
        b0._LanguageActionFactory();
    }
}
