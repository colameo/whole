package org.whole.lang.grammars;

import org.whole.lang.builders.IBuilderOperation;
import org.whole.lang.templates.AbstractTemplateFactory;

public class GrammarsParserGeneratorActions extends AbstractTemplateFactory<org.whole.lang.actions.model.LanguageActionFactory> {

    public void apply(IBuilderOperation op) {
        org.whole.lang.actions.builders.IActionsBuilder b0 = (org.whole.lang.actions.builders.IActionsBuilder) op.wGetBuilder(org.whole.lang.actions.reflect.ActionsLanguageKit.URI);
        b0.LanguageActionFactory_();
        b0.URI("whole:org.whole.lang.grammars:GrammarsParserGeneratorActions");
        b0.Namespace("org.whole.lang.grammars");
        b0.Name("GrammarsActions");
        org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
        b1.Resolver();
        b0.URI("http://lang.whole.org/Grammars");
        b0.ToolbarActions_();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b0.SimpleAction_();
        b0.Label("Generate Artifacts");
        org.whole.lang.queries.builders.IQueriesBuilder b2 = (org.whole.lang.queries.builders.IQueriesBuilder) op.wGetBuilder(org.whole.lang.queries.reflect.QueriesLanguageKit.URI);
        b2.Block_(16);
        b2.QueryDeclaration_();
        b2.Name("generateParse");
        b2.Names_(4);
        b2.Name("productionName");
        b2.Name("methodName");
        b2.Name("horizonIdGen");
        b2.Name("statements");
        b2._Names();
        b2.Select_();
        b1.StageUpFragment_();
        org.whole.lang.java.builders.IJavaBuilder b3 = (org.whole.lang.java.builders.IJavaBuilder) op.wGetBuilder(org.whole.lang.java.reflect.JavaLanguageKit.URI);
        b3.MethodDeclaration_();
        b1.Resolver();
        b3.ExtendedModifiers_(1);
        b3.Modifier("public");
        b3._ExtendedModifiers();
        b1.Resolver();
        b3.SimpleType("IEntity");
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleName");
        b1.VarName("methodName");
        b1.Quantifier("!");
        b1._Variable();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b3.Block_(3);
        b3.VariableDeclarationStatement_();
        b1.Resolver();
        b3.SimpleType("IEntity");
        b3.VariableDeclarationFragments_(1);
        b3.VariableDeclarationFragment_();
        b3.SimpleName("entity");
        b3.ExtraDimensions(0);
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("create");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("productionName");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._VariableDeclarationFragment();
        b3._VariableDeclarationFragments();
        b3._VariableDeclarationStatement();
        b1.InlineVariable_();
        b1.VarType("http://lang.whole.org/Java#Statement");
        b1.VarName("statements");
        b1.Quantifier("*");
        b1._InlineVariable();
        b3.ReturnStatement_();
        b3.SimpleName("entity");
        b3._ReturnStatement();
        b3._Block();
        b3._MethodDeclaration();
        b1._StageUpFragment();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("productionName");
        b2._Filter();
        b2._ExpressionTest();
        b2._Filter();
        b2.Sequence_(3);
        b2.Filter_();
        b2.Addition_();
        b2.StringLiteral("parse");
        b2.VariableRefStep("productionName");
        b2._Addition();
        b2.VariableTest("methodName");
        b2._Filter();
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.QualifiedName("org.whole.lang.util.UniqueIdGenerator");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("newUniqueIdGenerator");
        b3.Arguments_(1);
        b3.StringLiteral("horizon");
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("horizonIdGen");
        b2._Filter();
        b2.Path_(2);
        b2.FeatureStep("rule");
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptRule");
        b2.Expressions_(1);
        b2.BooleanLiteral(false);
        b2._Expressions();
        b2._Call();
        b2.VariableTest("statements");
        b2._Filter();
        b2._Path();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("generatePredict");
        b2.Names_(4);
        b2.Name("productionName");
        b2.Name("methodName");
        b2.Name("horizonIdGen");
        b2.Name("statements");
        b2._Names();
        b2.Select_();
        b1.StageUpFragment_();
        b3.MethodDeclaration_();
        b1.Resolver();
        b3.ExtendedModifiers_(1);
        b3.Modifier("public");
        b3._ExtendedModifiers();
        b1.Resolver();
        b3.PrimitiveType("int");
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleName");
        b1.VarName("methodName");
        b1.Quantifier("!");
        b1._Variable();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b3.Block_(3);
        b3.VariableDeclarationStatement_();
        b1.Resolver();
        b3.PrimitiveType("int");
        b3.VariableDeclarationFragments_(1);
        b3.VariableDeclarationFragment_();
        b3.SimpleName("prediction");
        b3.ExtraDimensions(0);
        b3.IntLiteral(0);
        b3._VariableDeclarationFragment();
        b3._VariableDeclarationFragments();
        b3._VariableDeclarationStatement();
        b1.InlineVariable_();
        b1.VarType("http://lang.whole.org/Java#Statement");
        b1.VarName("statements");
        b1.Quantifier("*");
        b1._InlineVariable();
        b3.ReturnStatement_();
        b3.SimpleName("prediction");
        b3._ReturnStatement();
        b3._Block();
        b3._MethodDeclaration();
        b1._StageUpFragment();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("productionName");
        b2._Filter();
        b2._ExpressionTest();
        b2._Filter();
        b2.Sequence_(3);
        b2.Filter_();
        b2.Addition_();
        b2.StringLiteral("match");
        b2.VariableRefStep("productionName");
        b2._Addition();
        b2.VariableTest("methodName");
        b2._Filter();
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.QualifiedName("org.whole.lang.util.UniqueIdGenerator");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("newUniqueIdGenerator");
        b3.Arguments_(1);
        b3.StringLiteral("horizon");
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("horizonIdGen");
        b2._Filter();
        b2.Path_(2);
        b2.FeatureStep("rule");
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptRule");
        b2.Expressions_(1);
        b2.BooleanLiteral(true);
        b2._Expressions();
        b2._Call();
        b2.VariableTest("statements");
        b2._Filter();
        b2._Path();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("productionByName");
        b2.Names_(2);
        b2.Name("name");
        b2.Name("where");
        b2._Names();
        b2.Block_(2);
        b2.Filter_();
        b1.StageUpFragment_();
        b2.Sequence_(2);
        b2.FeatureStep("phraseStructure");
        b2.FeatureStep("lexicalStructure");
        b2._Sequence();
        b1._StageUpFragment();
        b2.VariableTest("where");
        b2._Filter();
        b2.Path_(3);
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("Grammar");
        b2._Filter();
        b2.Call_();
        b2.Name("where");
        b1.Resolver();
        b2._Call();
        b2.Filter_();
        b2.ChildStep();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("name");
        b2._Filter();
        b2._ExpressionTest();
        b2._Filter();
        b2._Path();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptRule");
        b2.Names_(1);
        b2.Name("lookaheadMode");
        b2._Names();
        b2.Choose_(8);
        b2.Call_();
        b2.Name("acceptRepeat");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.Call_();
        b2.Name("acceptAs");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.Call_();
        b2.Name("acceptLiteralTerminal");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.Call_();
        b2.Name("acceptDataTerminal");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.Call_();
        b2.Name("acceptNonTerminal");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.Call_();
        b2.Name("acceptConcatenate");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.Call_();
        b2.Name("acceptChoose");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.Call_();
        b2.Name("acceptSplit");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2._Choose();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptAs");
        b2.Names_(3);
        b2.Name("lookaheadMode");
        b2.Name("name");
        b2.Name("expr");
        b2._Names();
        b2.Select_();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Equals_();
        b2.VariableRefStep("lookaheadMode");
        b2.BooleanLiteral(false);
        b2._Equals();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.Block_(1);
        b3.ExpressionStatement_();
        b3.MethodInvocation_();
        b3.SimpleName("entity");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wSet");
        b3.Arguments_(2);
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("fd");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("name");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("expr");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._ExpressionStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._If();
        b2.Do_();
        b1.StageUpFragment_();
        b3.Block_(1);
        b3.ExpressionStatement_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("expr");
        b1.Quantifier("!");
        b1._Variable();
        b3._ExpressionStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._Do();
        b2._Choose();
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("As");
        b2._Filter();
        b2.Sequence_(2);
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("name");
        b2._Filter();
        b2.Path_(2);
        b2.FeatureStep("rule");
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptNonTerminalExpr");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("expr");
        b2._Filter();
        b2._Path();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptLiteralTerminal");
        b2.Names_(2);
        b2.Name("lookaheadMode");
        b2.Name("pattern");
        b2._Names();
        b2.Select_();
        b1.StageUpFragment_();
        b3.Block_(1);
        b3.ExpressionStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("nextToken");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("pattern");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._ExpressionStatement();
        b3._Block();
        b1._StageUpFragment();
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("LiteralTerminal");
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("pattern");
        b2.VariableTest("pattern");
        b2._Filter();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptDataTerminal");
        b2.Names_(2);
        b2.Name("lookaheadMode");
        b2.Name("pattern");
        b2._Names();
        b2.Select_();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Equals_();
        b2.VariableRefStep("lookaheadMode");
        b2.BooleanLiteral(false);
        b2._Equals();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.Block_(1);
        b3.ExpressionStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("setValue");
        b3.Arguments_(2);
        b3.SimpleName("entity");
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("nextToken");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("pattern");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._Arguments();
        b3._MethodInvocation();
        b3._ExpressionStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._If();
        b2.Do_();
        b1.StageUpFragment_();
        b3.Block_(1);
        b3.ExpressionStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("nextToken");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("pattern");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._ExpressionStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._Do();
        b2._Choose();
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("DataTerminal");
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("pattern");
        b2.VariableTest("pattern");
        b2._Filter();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptNonTerminal");
        b2.Names_(1);
        b2.Name("lookaheadMode");
        b2._Names();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("NonTerminal");
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.Block_(1);
        b3.ExpressionStatement_();
        b1.StageDownFragment_();
        b2.Call_();
        b2.Name("acceptNonTerminalExpr");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b1._StageDownFragment();
        b3._ExpressionStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._If();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptNonTerminalExpr");
        b2.Names_(1);
        b2.Name("lookaheadMode");
        b2._Names();
        b2.Do_();
        b1.StageUpFragment_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b1.StageDownFragment_();
        b2.Addition_();
        b2.Singleton_();
        b2.Choose_(2);
        b2.If_();
        b2.Or_(2);
        b2.ExpressionTest_();
        b2.Equals_();
        b2.VariableRefStep("lookaheadMode");
        b2.BooleanLiteral(true);
        b2._Equals();
        b2._ExpressionTest();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("productionByName");
        b2.Expressions_(2);
        b2.SelfStep();
        b1.StageUpFragment_();
        b2.FeatureStep("lexicalStructure");
        b1._StageUpFragment();
        b2._Expressions();
        b2._Call();
        b2._ExpressionTest();
        b2._Or();
        b2.StringLiteral("match");
        b2._If();
        b2.StringLiteral("parse");
        b2._Choose();
        b2._Singleton();
        b2.Singleton_();
        b2.SelfStep();
        b2._Singleton();
        b2._Addition();
        b1._StageDownFragment();
        b1.Resolver();
        b3._MethodInvocation();
        b1._StageUpFragment();
        b2._Do();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptConcatenate");
        b2.Names_(2);
        b2.Name("lookaheadMode");
        b2.Name("statements");
        b2._Names();
        b2.Select_();
        b1.StageUpFragment_();
        b3.Block_(1);
        b1.InlineVariable_();
        b1.VarType("http://lang.whole.org/Java#Statement");
        b1.VarName("statements");
        b1.Quantifier("+");
        b1._InlineVariable();
        b3._Block();
        b1._StageUpFragment();
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("Concatenate");
        b2._Filter();
        b2.Path_(2);
        b2.ChildStep();
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptRule");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("statements");
        b2._Filter();
        b2._Path();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("generateRepeatPrediction");
        b2.Names_(4);
        b2.Name("ruleProduction");
        b2.Name("ruleLocation");
        b2.Name("separatorProduction");
        b2.Name("productionLocation");
        b2._Names();
        b2.Select_();
        b1.StageUpFragment_();
        b3.IfStatement_();
        b3.InfixExpression_();
        b3.InfixExpression_();
        b3.InfixExpression_();
        b3.SimpleName("count");
        b3.InfixOperator("==");
        b3.ByteLiteral((byte) 0);
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.InfixOperator("&&");
        b3.InfixExpression_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wPredict");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("ruleLocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3.InfixOperator("==");
        b3.PrefixExpression_();
        b3.PrefixOperator("-");
        b3.ByteLiteral((byte) 1);
        b3._PrefixExpression();
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.InfixOperator("||");
        b3.InfixExpression_();
        b3.InfixExpression_();
        b3.SimpleName("count");
        b3.InfixOperator(">");
        b3.ByteLiteral((byte) 0);
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.InfixOperator("&&");
        b3.InfixExpression_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wPredict");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("productionLocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3.InfixOperator("==");
        b3.PrefixExpression_();
        b3.PrefixOperator("-");
        b3.ByteLiteral((byte) 1);
        b3._PrefixExpression();
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.BreakStatement_();
        b1.Resolver();
        b3._BreakStatement();
        b1.Resolver();
        b3._IfStatement();
        b1._StageUpFragment();
        b2.SelfStep();
        b2.Sequence_(4);
        b2.Filter_();
        b2.Call_();
        b2.Name("productionByName");
        b2.Expressions_(1);
        b2.FeatureStep("rule");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("ruleProduction");
        b2._Filter();
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.QualifiedName("org.whole.lang.util.EntityUtils");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("getLocation");
        b3.Arguments_(1);
        b3.SimpleName("ruleProduction");
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("ruleLocation");
        b2._Filter();
        b2.Filter_();
        b2.Call_();
        b2.Name("productionByName");
        b2.Expressions_(1);
        b2.FeatureStep("separator");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("separatorProduction");
        b2._Filter();
        b2.Filter_();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("separator");
        b2.Not_();
        b2.KindTest("RESOLVER");
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.QualifiedName("org.whole.lang.util.EntityUtils");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("getLocation");
        b3.Arguments_(1);
        b3.SimpleName("separatorProduction");
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2._If();
        b2.Do_();
        b2.VariableRefStep("ruleLocation");
        b2._Do();
        b2._Choose();
        b2.VariableTest("productionLocation");
        b2._Filter();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptRepeat");
        b2.Names_(3);
        b2.Name("lookaheadMode");
        b2.Name("separatorInvocation");
        b2.Name("ruleInvocation");
        b2._Names();
        b2.Select_();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Equals_();
        b2.VariableRefStep("lookaheadMode");
        b2.BooleanLiteral(false);
        b2._Equals();
        b2._ExpressionTest();
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.Block_(3);
        b3.VariableDeclarationStatement_();
        b1.Resolver();
        b3.PrimitiveType("int");
        b3.VariableDeclarationFragments_(1);
        b3.VariableDeclarationFragment_();
        b3.SimpleName("count");
        b3.ExtraDimensions(0);
        b3.ByteLiteral((byte) 0);
        b3._VariableDeclarationFragment();
        b3._VariableDeclarationFragments();
        b3._VariableDeclarationStatement();
        b1.StageDownFragment_();
        b2.If_();
        b2.ExpressionTest_();
        b2.GreaterThan_();
        b2.Singleton_();
        b2.FeatureStep("lowerBound");
        b2._Singleton();
        b2.IntLiteral(0);
        b2._GreaterThan();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.WhileStatement_();
        b3.InfixExpression_();
        b3.SimpleName("count");
        b3.InfixOperator("<");
        b1.StageDownFragment_();
        b2.Singleton_();
        b2.FeatureStep("lowerBound");
        b2._Singleton();
        b1._StageDownFragment();
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.Block_(3);
        b1.StageDownFragment_();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("separator");
        b2.Not_();
        b2.KindTest("RESOLVER");
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.IfStatement_();
        b3.InfixExpression_();
        b3.SimpleName("count");
        b3.InfixOperator(">");
        b3.ByteLiteral((byte) 0);
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.ExpressionStatement_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("separatorInvocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._ExpressionStatement();
        b1.Resolver();
        b3._IfStatement();
        b1._StageUpFragment();
        b2._If();
        b1._StageDownFragment();
        b3.ExpressionStatement_();
        b3.MethodInvocation_();
        b3.SimpleName("entity");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wAdd");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("ruleInvocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._ExpressionStatement();
        b3.ExpressionStatement_();
        b3.PostfixExpression_();
        b3.SimpleName("count");
        b3.PostfixOperator("++");
        b3._PostfixExpression();
        b3._ExpressionStatement();
        b3._Block();
        b3._WhileStatement();
        b1._StageUpFragment();
        b2._If();
        b1._StageDownFragment();
        b3.WhileStatement_();
        b1.StageDownFragment_();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("upperBound");
        b2.TypeTest("Size");
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.InfixExpression_();
        b3.SimpleName("count");
        b3.InfixOperator("<");
        b1.StageDownFragment_();
        b2.Singleton_();
        b2.FeatureStep("upperBound");
        b2._Singleton();
        b1._StageDownFragment();
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b1._StageUpFragment();
        b2._If();
        b2.Do_();
        b1.StageUpFragment_();
        b3.BooleanLiteral(true);
        b1._StageUpFragment();
        b2._Do();
        b2._Choose();
        b1._StageDownFragment();
        b3.Block_(4);
        b1.StageDownFragment_();
        b2.Call_();
        b2.Name("generateRepeatPrediction");
        b1.Resolver();
        b2._Call();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("separator");
        b2.Not_();
        b2.KindTest("RESOLVER");
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.IfStatement_();
        b3.InfixExpression_();
        b3.SimpleName("count");
        b3.InfixOperator(">");
        b3.IntLiteral(0);
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.ExpressionStatement_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("separatorInvocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._ExpressionStatement();
        b1.Resolver();
        b3._IfStatement();
        b1._StageUpFragment();
        b2._If();
        b1._StageDownFragment();
        b3.ExpressionStatement_();
        b3.MethodInvocation_();
        b3.SimpleName("entity");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wAdd");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("ruleInvocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._ExpressionStatement();
        b3.ExpressionStatement_();
        b3.PostfixExpression_();
        b3.SimpleName("count");
        b3.PostfixOperator("++");
        b3._PostfixExpression();
        b3._ExpressionStatement();
        b3._Block();
        b3._WhileStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._If();
        b2.Do_();
        b1.StageUpFragment_();
        b3.Block_(1);
        b3.WhileStatement_();
        b3.BooleanLiteral(true);
        b3.Block_(2);
        b1.StageDownFragment_();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("separator");
        b2.Not_();
        b2.KindTest("RESOLVER");
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.VariableDeclarationStatement_();
        b1.Resolver();
        b3.PrimitiveType("boolean");
        b3.VariableDeclarationFragments_(1);
        b3.VariableDeclarationFragment_();
        b3.SimpleName("added");
        b3.ExtraDimensions(0);
        b3.BooleanLiteral(false);
        b3._VariableDeclarationFragment();
        b3._VariableDeclarationFragments();
        b3._VariableDeclarationStatement();
        b1._StageUpFragment();
        b2._If();
        b1._StageDownFragment();
        b3.TryStatement_();
        b3.Block_(5);
        b3.ExpressionStatement_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("ruleInvocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._ExpressionStatement();
        b3.ExpressionStatement_();
        b3.PostfixExpression_();
        b3.SimpleName("prediction");
        b3.PostfixOperator("++");
        b3._PostfixExpression();
        b3._ExpressionStatement();
        b1.StageDownFragment_();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("separator");
        b2.Not_();
        b2.KindTest("RESOLVER");
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.ExpressionStatement_();
        b3.Assignment_();
        b3.SimpleName("added");
        b3.AssignmentOperator("=");
        b3.BooleanLiteral(true);
        b3._Assignment();
        b3._ExpressionStatement();
        b1._StageUpFragment();
        b2._If();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("upperBound");
        b2.TypeTest("Size");
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.IfStatement_();
        b3.InfixExpression_();
        b3.SimpleName("prediction");
        b3.InfixOperator("==");
        b1.StageDownFragment_();
        b2.Singleton_();
        b2.FeatureStep("upperBound");
        b2._Singleton();
        b1._StageDownFragment();
        b1.Resolver();
        b3._InfixExpression();
        b3.BreakStatement_();
        b1.Resolver();
        b3._BreakStatement();
        b1.Resolver();
        b3._IfStatement();
        b1._StageUpFragment();
        b2._If();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("separator");
        b2.Not_();
        b2.KindTest("RESOLVER");
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.ExpressionStatement_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("separatorInvocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._ExpressionStatement();
        b1._StageUpFragment();
        b2._If();
        b1._StageDownFragment();
        b3._Block();
        b3.CatchClauses_(1);
        b3.CatchClause_();
        b3.SingleVariableDeclaration_();
        b1.Resolver();
        b3.SimpleType("ParseException");
        b3.Varargs(false);
        b3.SimpleName("e");
        b3.ExtraDimensions(0);
        b1.Resolver();
        b3._SingleVariableDeclaration();
        b3.Block_(3);
        b1.StageDownFragment_();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("separator");
        b2.Not_();
        b2.KindTest("RESOLVER");
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.IfStatement_();
        b3.InfixExpression_();
        b3.PrefixExpression_();
        b3.PrefixOperator("!");
        b3.SimpleName("added");
        b3._PrefixExpression();
        b3.InfixOperator("&&");
        b3.InfixExpression_();
        b3.SimpleName("prediction");
        b3.InfixOperator(">");
        b3.ByteLiteral((byte) 0);
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.Expressions_(0);
        b3._Expressions();
        b3._InfixExpression();
        b3.ThrowStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("createParseError");
        b3.Arguments_(1);
        b3.StringLiteral("cannot apply repeat rule");
        b3._Arguments();
        b3._MethodInvocation();
        b3._ThrowStatement();
        b1.Resolver();
        b3._IfStatement();
        b1._StageUpFragment();
        b2._If();
        b1._StageDownFragment();
        b3.IfStatement_();
        b3.InfixExpression_();
        b3.SimpleName("prediction");
        b3.InfixOperator("<");
        b1.StageDownFragment_();
        b2.Singleton_();
        b2.FeatureStep("lowerBound");
        b2._Singleton();
        b1._StageDownFragment();
        b1.Resolver();
        b3._InfixExpression();
        b3.ThrowStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("createParseError");
        b3.Arguments_(1);
        b3.StringLiteral("lower bound not reached in repeat rule");
        b3._Arguments();
        b3._MethodInvocation();
        b3._ThrowStatement();
        b1.Resolver();
        b3._IfStatement();
        b3.BreakStatement_();
        b1.Resolver();
        b3._BreakStatement();
        b3._Block();
        b3._CatchClause();
        b3._CatchClauses();
        b3.Block_(0);
        b3._Block();
        b3._TryStatement();
        b3._Block();
        b3._WhileStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._Do();
        b2._Choose();
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("Repeat");
        b2._Filter();
        b2.Sequence_(2);
        b2.Path_(2);
        b2.FeatureStep("rule");
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptNonTerminalExpr");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("ruleInvocation");
        b2._Filter();
        b2._Path();
        b2.Path_(2);
        b2.FeatureStep("separator");
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptNonTerminalExpr");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("separatorInvocation");
        b2._Filter();
        b2._Path();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptChoose");
        b2.Names_(8);
        b2.Name("lookaheadMode");
        b2.Name("production");
        b2.Name("productionLocation");
        b2.Name("caseStatements");
        b2.Name("tryStatements");
        b2.Name("child");
        b2.Name("index");
        b2.Name("expr");
        b2._Names();
        b2.Select_();
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Equals_();
        b2.VariableRefStep("lookaheadMode");
        b2.BooleanLiteral(false);
        b2._Equals();
        b2._ExpressionTest();
        b1.StageUpFragment_();
        b3.Block_(1);
        b3.SwitchStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wPredict");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("productionLocation");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3.Statements_(3);
        b1.InlineVariable_();
        b1.VarType("http://lang.whole.org/Java#Statement");
        b1.VarName("caseStatements");
        b1.Quantifier("+");
        b1._InlineVariable();
        b3.SwitchDefault();
        b3.ThrowStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("createParseError");
        b3.Arguments_(1);
        b3.StringLiteral("missing choose step");
        b3._Arguments();
        b3._MethodInvocation();
        b3._ThrowStatement();
        b3._Statements();
        b3._SwitchStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._If();
        b2.Do_();
        b1.StageUpFragment_();
        b3.Block_(2);
        b3.VariableDeclarationStatement_();
        b1.Resolver();
        b3.QualifiedType("Lexer.Memento");
        b3.VariableDeclarationFragments_(1);
        b3.VariableDeclarationFragment_();
        b3.SimpleName("memento");
        b3.ExtraDimensions(0);
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("mark");
        b3.Arguments_(0);
        b3._Arguments();
        b3._MethodInvocation();
        b3._VariableDeclarationFragment();
        b3._VariableDeclarationFragments();
        b3._VariableDeclarationStatement();
        b3.WhileStatement_();
        b3.BooleanLiteral(true);
        b3.Block_(2);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Statement");
        b1.VarName("tryStatements");
        b1.Quantifier("+");
        b1._Variable();
        b3.ThrowStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("createParseError");
        b3.Arguments_(1);
        b3.StringLiteral("cannot apply choose rule");
        b3._Arguments();
        b3._MethodInvocation();
        b3._ThrowStatement();
        b3._Block();
        b3._WhileStatement();
        b3._Block();
        b1._StageUpFragment();
        b2._Do();
        b2._Choose();
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("Choose");
        b2._Filter();
        b2.Sequence_(4);
        b2.Filter_();
        b2.AncestorStep();
        b2.And_(2);
        b2.TypeTest("Production");
        b2.VariableTest("production");
        b2._And();
        b2._Filter();
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.QualifiedName("org.whole.lang.util.EntityUtils");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("getLocation");
        b3.Arguments_(1);
        b3.SimpleName("production");
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("productionLocation");
        b2._Filter();
        b2.Select_();
        b2.Filter_();
        b1.StageUpFragment_();
        b3.Block_(3);
        b3.SwitchCase_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#IntLiteral");
        b1.VarName("index");
        b1.Quantifier("!");
        b1._Variable();
        b3._SwitchCase();
        b3.ExpressionStatement_();
        b3.Assignment_();
        b3.SimpleName("entity");
        b3.AssignmentOperator("=");
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("expr");
        b1.Quantifier("!");
        b1._Variable();
        b3._Assignment();
        b3._ExpressionStatement();
        b3.BreakStatement_();
        b1.Resolver();
        b3._BreakStatement();
        b3._Block();
        b1._StageUpFragment();
        b2.VariableTest("caseStatements");
        b2._Filter();
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Equals_();
        b2.VariableRefStep("lookaheadMode");
        b2.BooleanLiteral(false);
        b2._Equals();
        b2._ExpressionTest();
        b2._Filter();
        b2.Filter_();
        b2.ChildStep();
        b2.VariableTest("child");
        b2._Filter();
        b2._Path();
        b2.Sequence_(2);
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.MethodInvocation_();
        b3.SimpleName("child");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wGetParent");
        b3.Arguments_(0);
        b3._Arguments();
        b3._MethodInvocation();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wIndexOf");
        b3.Arguments_(1);
        b3.SimpleName("child");
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("index");
        b2._Filter();
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptNonTerminalExpr");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("expr");
        b2._Filter();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2.Select_();
        b2.Filter_();
        b1.StageUpFragment_();
        b3.TryStatement_();
        b3.Block_(3);
        b3.ExpressionStatement_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("expr");
        b1.Quantifier("!");
        b1._Variable();
        b3._ExpressionStatement();
        b3.ExpressionStatement_();
        b3.Assignment_();
        b3.SimpleName("prediction");
        b3.AssignmentOperator("=");
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#IntLiteral");
        b1.VarName("index");
        b1.Quantifier("!");
        b1._Variable();
        b3._Assignment();
        b3._ExpressionStatement();
        b3.BreakStatement_();
        b1.Resolver();
        b3._BreakStatement();
        b3._Block();
        b3.CatchClauses_(1);
        b3.CatchClause_();
        b3.SingleVariableDeclaration_();
        b1.Resolver();
        b3.SimpleType("ParseException");
        b3.Varargs(false);
        b3.SimpleName("e");
        b3.ExtraDimensions(0);
        b1.Resolver();
        b3._SingleVariableDeclaration();
        b3.Block_(1);
        b3.ExpressionStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("reset");
        b3.Arguments_(1);
        b3.SimpleName("memento");
        b3._Arguments();
        b3._MethodInvocation();
        b3._ExpressionStatement();
        b3._Block();
        b3._CatchClause();
        b3._CatchClauses();
        b3.Block_(0);
        b3._Block();
        b3._TryStatement();
        b1._StageUpFragment();
        b2.VariableTest("tryStatements");
        b2._Filter();
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Equals_();
        b2.VariableRefStep("lookaheadMode");
        b2.BooleanLiteral(true);
        b2._Equals();
        b2._ExpressionTest();
        b2._Filter();
        b2.Filter_();
        b2.ChildStep();
        b2.VariableTest("child");
        b2._Filter();
        b2._Path();
        b2.Sequence_(2);
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.MethodInvocation_();
        b3.SimpleName("child");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wGetParent");
        b3.Arguments_(0);
        b3._Arguments();
        b3._MethodInvocation();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("wIndexOf");
        b3.Arguments_(1);
        b3.SimpleName("child");
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("index");
        b2._Filter();
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptNonTerminalExpr");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("expr");
        b2._Filter();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("acceptSplit");
        b2.Names_(6);
        b2.Name("lookaheadMode");
        b2.Name("splitterStringArg");
        b2.Name("splitterIntArg");
        b2.Name("splitterMethod");
        b2.Name("horizonVarName");
        b2.Name("ruleStatements");
        b2._Names();
        b2.Select_();
        b1.StageUpFragment_();
        b3.Block_(3);
        b3.VariableDeclarationStatement_();
        b1.Resolver();
        b3.PrimitiveType("int");
        b3.VariableDeclarationFragments_(1);
        b3.VariableDeclarationFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleName");
        b1.VarName("horizonVarName");
        b1.Quantifier("!");
        b1._Variable();
        b3.ExtraDimensions(0);
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleName");
        b1.VarName("splitterMethod");
        b1.Quantifier("!");
        b1._Variable();
        b3.Arguments_(2);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#IntLiteral");
        b1.VarName("splitterIntArg");
        b1.Quantifier("?");
        b1._Variable();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#StringLiteral");
        b1.VarName("splitterStringArg");
        b1.Quantifier("?");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._VariableDeclarationFragment();
        b3._VariableDeclarationFragments();
        b3._VariableDeclarationStatement();
        b1.InlineVariable_();
        b1.VarType("http://lang.whole.org/Java#Statement");
        b1.VarName("ruleStatements");
        b1.Quantifier("*");
        b1._InlineVariable();
        b3.IfStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("hitEnd");
        b3.Arguments_(0);
        b3._Arguments();
        b3._MethodInvocation();
        b3.ExpressionStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("setHorizonPosition");
        b3.Arguments_(1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleName");
        b1.VarName("horizonVarName");
        b1.Quantifier("!");
        b1._Variable();
        b3._Arguments();
        b3._MethodInvocation();
        b3._ExpressionStatement();
        b3.ThrowStatement_();
        b3.MethodInvocation_();
        b1.Resolver();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("createParseError");
        b3.Arguments_(1);
        b3.StringLiteral("bad horizon constraint");
        b3._Arguments();
        b3._MethodInvocation();
        b3._ThrowStatement();
        b3._IfStatement();
        b3._Block();
        b1._StageUpFragment();
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("Split");
        b2._Filter();
        b2.Sequence_(4);
        b2.Choose_(2);
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("splitter");
        b2.TypeTest("ByDelimiter");
        b2._Filter();
        b2._ExpressionTest();
        b2.Path_(2);
        b2.FeatureStep("splitter");
        b2.Filter_();
        b2.FeatureStep("delimiter");
        b2.VariableTest("splitterStringArg");
        b2._Filter();
        b2._Path();
        b2._If();
        b2.Do_();
        b2.Filter_();
        b2.FeatureStep("splitter");
        b2.VariableTest("splitterIntArg");
        b2._Filter();
        b2._Do();
        b2._Choose();
        b2.Filter_();
        b2.Choose_(3);
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("splitter");
        b2.TypeTest("BySize");
        b2._Filter();
        b2._ExpressionTest();
        b2.StringLiteral("setHorizonBySize");
        b2._If();
        b2.If_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("splitter");
        b2.TypeTest("ByDelimiter");
        b2._Filter();
        b2._ExpressionTest();
        b2.StringLiteral("setHorizonByDelimiter");
        b2._If();
        b2.Do_();
        b2.StringLiteral("setHorizonByLines");
        b2._Do();
        b2._Choose();
        b2.VariableTest("splitterMethod");
        b2._Filter();
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.QualifiedName("horizonIdGen");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("next");
        b1.Resolver();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("horizonVarName");
        b2._Filter();
        b2.Path_(2);
        b2.FeatureStep("rule");
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptRule");
        b2.Expressions_(1);
        b2.VariableRefStep("lookaheadMode");
        b2._Expressions();
        b2._Call();
        b2.VariableTest("ruleStatements");
        b2._Filter();
        b2._Path();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.QualifiedName("org.whole.lang.operations.NormalizerOperation");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("normalize");
        b3.Arguments_(1);
        b3.MethodInvocation_();
        b3.QualifiedName("org.whole.lang.operations.CloneModelOperation");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("clone");
        b3.Arguments_(1);
        b3.SimpleName("self");
        b3._Arguments();
        b3._MethodInvocation();
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("normalizedGrammar");
        b2._Filter();
        b2.Select_();
        b1.StageUpFragment_();
        org.whole.lang.artifacts.builders.IArtifactsBuilder b4 = (org.whole.lang.artifacts.builders.IArtifactsBuilder) op.wGetBuilder(org.whole.lang.artifacts.reflect.ArtifactsLanguageKit.URI);
        b4.Workspace_();
        b1.Resolver();
        b4.Projects_(1);
        b4.Project_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#ProjectName");
        b1.VarName("projectName");
        b1.Quantifier("!");
        b1._Variable();
        b4.Natures_(0);
        b4._Natures();
        b1.Resolver();
        b4.Artifacts_(1);
        b4.FolderArtifact_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#Name");
        b1.VarName("sourceFolderName");
        b1.Quantifier("!");
        b1._Variable();
        b1.Resolver();
        b4.Artifacts_(1);
        b4.PackageArtifact_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#PackageName");
        b1.VarName("packageName");
        b1.Quantifier("!");
        b1._Variable();
        b1.Resolver();
        b4.Artifacts_(2);
        b4.FileArtifact_();
        b4.NameWithExtension_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#Name");
        b1.VarName("parserClassName");
        b1.Quantifier("!");
        b1._Variable();
        b4.Extension("java");
        b4._NameWithExtension();
        b1.Resolver();
        b1.StageUpFragment_();
        b3.CompilationUnit_();
        b3.PackageDeclaration_();
        b1.Resolver();
        b1.Resolver();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#QualifiedName");
        b1.VarName("packageName");
        b1.Quantifier("!");
        b1._Variable();
        b3._PackageDeclaration();
        b3.ImportDeclarations_(4);
        b3.ImportDeclaration_();
        b3.QualifiedName("org.whole.lang.grammars.model.Grammar");
        b3.ImportModifier(false);
        b3.ImportModifier(false);
        b3._ImportDeclaration();
        b3.ImportDeclaration_();
        b3.QualifiedName("org.whole.lang.grammars.parsers");
        b3.ImportModifier(true);
        b3.ImportModifier(false);
        b3._ImportDeclaration();
        b3.ImportDeclaration_();
        b3.QualifiedName("org.whole.lang.model.IEntity");
        b3.ImportModifier(false);
        b3.ImportModifier(false);
        b3._ImportDeclaration();
        b3.ImportDeclaration_();
        b3.QualifiedName("org.whole.lang.parsers");
        b3.ImportModifier(true);
        b3.ImportModifier(false);
        b3._ImportDeclaration();
        b3._ImportDeclarations();
        b3.TypeDeclarations_(1);
        b3.ClassDeclaration_();
        b3.Javadoc_();
        b3.Tags_(1);
        b3.TagElement_();
        b3.TagName("generator");
        b3.DocElements_(1);
        b3.TextElement(" Whole");
        b3._DocElements();
        b3._TagElement();
        b3._Tags();
        b3._Javadoc();
        b3.ExtendedModifiers_(1);
        b3.Modifier("public");
        b3._ExtendedModifiers();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleName");
        b1.VarName("parserClassName");
        b1.Quantifier("!");
        b1._Variable();
        b1.Resolver();
        b3.SimpleType("AbstractPredictiveParser");
        b1.Resolver();
        b3.BodyDeclarations_(5);
        b3.ConstructorDeclaration_();
        b1.Resolver();
        b3.ExtendedModifiers_(1);
        b3.Modifier("public");
        b3._ExtendedModifiers();
        b1.Resolver();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleName");
        b1.VarName("parserClassName");
        b1.Quantifier("!");
        b1._Variable();
        b3.Parameters_(1);
        b3.SingleVariableDeclaration_();
        b1.Resolver();
        b3.SimpleType("CharSequence");
        b3.Varargs(false);
        b3.SimpleName("text");
        b3.ExtraDimensions(0);
        b1.Resolver();
        b3._SingleVariableDeclaration();
        b3._Parameters();
        b1.Resolver();
        b1.Resolver();
        b3.Block_(1);
        b3.ConstructorInvocation_();
        b3.Types_(0);
        b3._Types();
        b3.Arguments_(2);
        b3.ClassInstanceCreation_();
        b1.Resolver();
        b1.Resolver();
        b3.SimpleType("Lexer");
        b3.Arguments_(1);
        b3.SimpleName("text");
        b3._Arguments();
        b1.Resolver();
        b3._ClassInstanceCreation();
        b3.MethodInvocation_();
        b3.ClassInstanceCreation_();
        b1.Resolver();
        b1.Resolver();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleType");
        b1.VarName("fileName");
        b1.Quantifier("!");
        b1._Variable();
        b1.Resolver();
        b1.Resolver();
        b3._ClassInstanceCreation();
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("create");
        b3.Arguments_(0);
        b3._Arguments();
        b3._MethodInvocation();
        b3._Arguments();
        b3._ConstructorInvocation();
        b3._Block();
        b3._ConstructorDeclaration();
        b3.ConstructorDeclaration_();
        b1.Resolver();
        b3.ExtendedModifiers_(1);
        b3.Modifier("public");
        b3._ExtendedModifiers();
        b1.Resolver();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#SimpleName");
        b1.VarName("parserClassName");
        b1.Quantifier("!");
        b1._Variable();
        b3.Parameters_(2);
        b3.SingleVariableDeclaration_();
        b1.Resolver();
        b3.SimpleType("Lexer");
        b3.Varargs(false);
        b3.SimpleName("lexer");
        b3.ExtraDimensions(0);
        b1.Resolver();
        b3._SingleVariableDeclaration();
        b3.SingleVariableDeclaration_();
        b1.Resolver();
        b3.SimpleType("Grammar");
        b3.Varargs(false);
        b3.SimpleName("grammar");
        b3.ExtraDimensions(0);
        b1.Resolver();
        b3._SingleVariableDeclaration();
        b3._Parameters();
        b1.Resolver();
        b1.Resolver();
        b3.Block_(1);
        b3.SuperConstructorInvocation_();
        b1.Resolver();
        b1.Resolver();
        b3.Arguments_(2);
        b3.SimpleName("lexer");
        b3.SimpleName("grammar");
        b3._Arguments();
        b3._SuperConstructorInvocation();
        b3._Block();
        b3._ConstructorDeclaration();
        b3.MethodDeclaration_();
        b1.Resolver();
        b3.ExtendedModifiers_(1);
        b3.Modifier("public");
        b3._ExtendedModifiers();
        b1.Resolver();
        b3.SimpleType("IEntity");
        b3.SimpleName("wParseStartSymbol");
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b3.Block_(1);
        b3.ReturnStatement_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#Expression");
        b1.VarName("startExpr");
        b1.Quantifier("!");
        b1._Variable();
        b3._ReturnStatement();
        b3._Block();
        b3._MethodDeclaration();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#BodyDeclaration");
        b1.VarName("parseDeclaration");
        b1.Quantifier("+");
        b1._Variable();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Java#BodyDeclaration");
        b1.VarName("predictDeclaration");
        b1.Quantifier("*");
        b1._Variable();
        b3._BodyDeclarations();
        b3._ClassDeclaration();
        b3._TypeDeclarations();
        b3._CompilationUnit();
        b1._StageUpFragment();
        b4._FileArtifact();
        b4.FileArtifact_();
        b4.NameWithExtension_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#Name");
        b1.VarName("modelClassName");
        b1.Quantifier("!");
        b1._Variable();
        b4.Extension("java");
        b4._NameWithExtension();
        b4.Metadata_();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b4.PersistenceKitId("org.whole.lang.java.codebase.JavaBuilderPersistenceKit");
        b4._Metadata();
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Models#Model");
        b1.VarName("model");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b4._FileArtifact();
        b4._Artifacts();
        b4._PackageArtifact();
        b4._Artifacts();
        b4._FolderArtifact();
        b4._Artifacts();
        b1.Resolver();
        b4._Project();
        b4._Projects();
        b4._Workspace();
        b1._StageUpFragment();
        b2.Filter_();
        b2.VariableRefStep("normalizedGrammar");
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("languageName");
        b2._Filter();
        b2._ExpressionTest();
        b2._Filter();
        b2.Sequence_(6);
        b2.Filter_();
        b2.Addition_();
        b2.VariableRefStep("languageName");
        b2.StringLiteral("PredictiveParser");
        b2._Addition();
        b2.VariableTest("parserClassName");
        b2._Filter();
        b2.Path_(2);
        b2.FeatureStep("startSymbol");
        b2.Filter_();
        b2.Call_();
        b2.Name("acceptNonTerminalExpr");
        b2.Expressions_(1);
        b2.BooleanLiteral(false);
        b2._Expressions();
        b2._Call();
        b2.VariableTest("startExpr");
        b2._Filter();
        b2._Path();
        b2.Path_(3);
        b2.FeatureStep("phraseStructure");
        b2.ChildStep();
        b2.Filter_();
        b2.Call_();
        b2.Name("generateParse");
        b1.Resolver();
        b2._Call();
        b2.VariableTest("parseDeclaration");
        b2._Filter();
        b2._Path();
        b2.Path_(3);
        b2.Sequence_(2);
        b2.FeatureStep("phraseStructure");
        b2.FeatureStep("lexicalStructure");
        b2._Sequence();
        b2.ChildStep();
        b2.Filter_();
        b2.Call_();
        b2.Name("generatePredict");
        b1.Resolver();
        b2._Call();
        b2.VariableTest("predictDeclaration");
        b2._Filter();
        b2._Path();
        b2.Filter_();
        b2.Addition_();
        b2.VariableRefStep("languageName");
        b2.StringLiteral("Model");
        b2._Addition();
        b2.VariableTest("modelClassName");
        b2._Filter();
        b2.Filter_();
        b1.SameStageFragment_();
        b3.MethodInvocation_();
        b3.QualifiedName("org.whole.lang.grammars.util.GrammarsUtils");
        b3.Types_(0);
        b3._Types();
        b3.SimpleName("getModel");
        b3.Arguments_(1);
        b3.SimpleName("self");
        b3._Arguments();
        b3._MethodInvocation();
        b1._SameStageFragment();
        b2.VariableTest("model");
        b2._Filter();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._Block();
        b0._SimpleAction();
        b0._ToolbarActions();
        b0.ContextMenuActions_();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b1.Resolver();
        b0._ContextMenuActions();
        b0._LanguageActionFactory();
    }
}
