package org.whole.lang.grammars;

import org.whole.lang.builders.IBuilderOperation;
import org.whole.lang.templates.AbstractTemplateFactory;

public class GrammarsActions extends AbstractTemplateFactory<org.whole.lang.actions.model.LanguageActionFactory> {

    public void apply(IBuilderOperation op) {
        org.whole.lang.actions.builders.IActionsBuilder b0 = (org.whole.lang.actions.builders.IActionsBuilder) op.wGetBuilder(org.whole.lang.actions.reflect.ActionsLanguageKit.URI);
        b0.LanguageActionFactory_();
        b0.URI("whole:org.whole.lang.grammars:GrammarsActions");
        b0.Namespace("org.whole.lang.grammars");
        b0.Name("GrammarsActions");
        org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
        b1.Resolver();
        b0.URI("http://lang.whole.org/Grammars");
        b0.ToolbarActions_();
        b1.Resolver();
        b0.SimpleAction_();
        b0.Label("Normalize");
        org.whole.lang.queries.builders.IQueriesBuilder b2 = (org.whole.lang.queries.builders.IQueriesBuilder) op.wGetBuilder(org.whole.lang.queries.reflect.QueriesLanguageKit.URI);
        b2.Block_(23);
        b2.QueryDeclaration_();
        b2.Name("addTokenName");
        b2.Names_(2);
        b2.Name("tokenName");
        b2.Name("toNonTerminalType");
        b2._Names();
        b2.Block_(4);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("tokenName");
        b2._Filter();
        b2.Filter_();
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#NonTerminal");
        b1.VarName("tokenName");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b2.VariableTest("toNonTerminalType");
        b2._Filter();
        org.whole.lang.workflows.builders.IWorkflowsBuilder b3 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
        b3.InvokeJavaInstanceMethod_();
        b3.Text("update token name set");
        b1.Resolver();
        b3.Variable("tokenSet");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers$TokenSet");
        b3.StringLiteral("add(org.whole.lang.grammars.model.NonTerminal)");
        b3.Expressions_(1);
        b3.Variable("toNonTerminalType");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2.VariableRefStep("toNonTerminalType");
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("inTokenSet");
        b1.Resolver();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("is contained in token name set");
        b1.Resolver();
        b3.Variable("tokenSet");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers$TokenSet");
        b3.StringLiteral("contains(java.lang.String)");
        b3.Expressions_(1);
        b3.Variable("self");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._ExpressionTest();
        b2._Filter();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("isTokenNonTerminal");
        b1.Resolver();
        b2.Filter_();
        b2.SelfStep();
        b2.And_(2);
        b2.TypeTest("NonTerminal");
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("inTokenSet");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("isProductionNonTerminal");
        b1.Resolver();
        b2.Filter_();
        b2.SelfStep();
        b2.And_(2);
        b2.TypeTest("NonTerminal");
        b2.Not_();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("inTokenSet");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2._Filter();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("extractTokens");
        b1.Resolver();
        b2.Block_(3);
        b2.QueryDeclaration_();
        b2.Name("getTokenByTerminal");
        b2.Names_(1);
        b2.Name("term");
        b2._Names();
        b2.Block_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("term");
        b2._Filter();
        b2.Path_(3);
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("Grammar");
        b2._Filter();
        b2.FeatureStep("lexicalStructure");
        b2.Filter_();
        b2.ChildStep();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("rule");
        b2.VariableTest("term");
        b2._Filter();
        b2._ExpressionTest();
        b2._Filter();
        b2._Path();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("extractToken");
        b2.Names_(1);
        b2.Name("freshName");
        b2._Names();
        b2.Block_(2);
        b2.Filter_();
        b3.InvokeJavaClassMethod_();
        b3.Text("calculate next token fresh name");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers");
        b3.StringLiteral("nextTokenFreshName(org.whole.lang.util.FreshNameGenerator)");
        b3.Expressions_(1);
        b3.Variable("freshNameGenerator");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b2.VariableTest("freshName");
        b2._Filter();
        b2.PointwiseInsert_();
        b2.Placement("INTO");
        b2.Path_(2);
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("Grammar");
        b2._Filter();
        b2.FeatureStep("lexicalStructure");
        b2._Path();
        b1.StageUpFragment_();
        org.whole.lang.grammars.builders.IGrammarsBuilder b4 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
        b4.Production_();
        b1.StageDownFragment_();
        b2.Call_();
        b2.Name("addTokenName");
        b2.Expressions_(1);
        b2.VariableRefStep("freshName");
        b2._Expressions();
        b2._Call();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.SelfStep();
        b1._StageDownFragment();
        b1.Resolver();
        b4._Production();
        b1._StageUpFragment();
        b2._PointwiseInsert();
        b2._Block();
        b2._QueryDeclaration();
        b2.CartesianUpdate_();
        b2.Filter_();
        b2.DescendantStep();
        b2.Or_(2);
        b2.TypeTest("LiteralTerminal");
        b2.SubtypeTest("EpsilonRule");
        b2._Or();
        b2._Filter();
        b2.Path_(2);
        b2.Choose_(2);
        b2.Call_();
        b2.Name("getTokenByTerminal");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("extractToken");
        b1.Resolver();
        b2._Call();
        b2._Choose();
        b2.FeatureStep("name");
        b2._Path();
        b2._CartesianUpdate();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("allNonTokenChildren");
        b1.Resolver();
        b2.Choose_(2);
        b2.Path_(2);
        b2.Choose_(2);
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("Concatenate");
        b2._Filter();
        b2.ChildStep();
        b2._Path();
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.Or_(2);
        b2.TypeTest("Split");
        b2.TypeTest("When");
        b2._Or();
        b2._Filter();
        b2.FeatureStep("rule");
        b2._Path();
        b2._Choose();
        b2.Call_();
        b2.Name("allNonTokenChildren");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.Filter_();
        b2.SelfStep();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isTokenNonTerminal");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Not();
        b2._Filter();
        b2._Choose();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("effectiveParent");
        b1.Resolver();
        b2.Path_(2);
        b2.ParentStep();
        b2.Choose_(2);
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.Or_(2);
        b2.TypeTest("Split");
        b2.TypeTest("When");
        b2._Or();
        b2._Filter();
        b2.Call_();
        b2.Name("effectiveParent");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.SelfStep();
        b2._Choose();
        b2._Path();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("isInlineConcatenate");
        b1.Resolver();
        b2.Filter_();
        b2.SelfStep();
        b2.And_(2);
        b2.TypeTest("Concatenate");
        b2.Or_(2);
        b2.ExpressionTest_();
        b2.Filter_();
        b2.Call_();
        b2.Name("effectiveParent");
        b1.Resolver();
        b2._Call();
        b2.TypeTest("Concatenate");
        b2._Filter();
        b2._ExpressionTest();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.DescendantStep();
        b2.TypeTest("As");
        b2._Filter();
        b2._ExpressionTest();
        b2._Not();
        b2._Or();
        b2._And();
        b2._Filter();
        b2._QueryDeclaration();
        b2.Filter_();
        b3.CreateJavaClassInstance_();
        b3.Text("create token name set");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers$TokenSet");
        b3.StringLiteral("TokenSet(org.whole.lang.model.IEntity)");
        b3.Expressions_(1);
        b2.Path_(2);
        b2.FeatureStep("lexicalStructure");
        b2.Union_();
        b2.Expressions_(1);
        b2.Path_(2);
        b2.ChildStep();
        b2.FeatureStep("name");
        b2._Path();
        b2._Expressions();
        b1.Resolver();
        b2._Union();
        b2._Path();
        b3._Expressions();
        b3._CreateJavaClassInstance();
        b2.VariableTest("tokenSet");
        b2._Filter();
        b2.Filter_();
        b3.CreateJavaClassInstance_();
        b3.Text("create type fresh name generator");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.util.FreshNameGenerator");
        b3.StringLiteral("FreshNameGenerator(java.util.Collection)");
        b3.Expressions_(1);
        b3.Variable("tokenSet");
        b3._Expressions();
        b3._CreateJavaClassInstance();
        b2.VariableTest("freshNameGenerator");
        b2._Filter();
        b2.Filter_();
        b2.UnionAll_();
        b2.Expressions_(0);
        b2._Expressions();
        b2._UnionAll();
        b2.VariableTest("newProductions");
        b2._Filter();
        b2.QueryDeclaration_();
        b2.Name("collectNonTerminalNames");
        b2.Names_(0);
        b2._Names();
        b2.For_();
        b2.Path_(2);
        b2.Filter_();
        b2.DescendantStep();
        b2.TypeTest("http://lang.whole.org/Grammars#Production");
        b2._Filter();
        b2.FeatureStep("http://lang.whole.org/Grammars#name");
        b2._Path();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("update bound names");
        b1.Resolver();
        b3.Variable("freshNameGenerator");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.util.FreshNameGenerator");
        b3.StringLiteral("addBoundName(java.lang.String)");
        b3.Expressions_(1);
        b3.Variable("self");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._For();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("bottomUp");
        b1.Resolver();
        b2.Sequence_(3);
        b2.Delete_();
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("Concatenate");
        b2._Filter();
        b2.Filter_();
        b2.ChildStep();
        b2.KindTest("RESOLVER");
        b2._Filter();
        b2._Path();
        b2._Delete();
        b2.Path_(2);
        b2.ChildStep();
        b2.Call_();
        b2.Name("bottomUp");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.Filter_();
        b2.SelfStep();
        b2.And_(2);
        b2.SubtypeTest("Rule");
        b2.Not_();
        b2.Or_(2);
        b2.TypeTest("Split");
        b2.TypeTest("When");
        b2._Or();
        b2._Not();
        b2._And();
        b2._Filter();
        b2._Sequence();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("removeUglyAs");
        b1.Resolver();
        b2.Choose_(2);
        b2.If_();
        b2.And_(2);
        b2.TypeTest("As");
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("rule");
        b2.TypeTest("Optional");
        b2._Filter();
        b2._ExpressionTest();
        b2._And();
        b2.Choose_(2);
        b2.CartesianUpdate_();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b1.StageUpFragment_();
        b4.As_();
        b4.Optional_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#Rule");
        b1.VarName("rule");
        b1.Quantifier("!");
        b1._Variable();
        b4._Optional();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#Name");
        b1.VarName("name");
        b1.Quantifier("!");
        b1._Variable();
        b4._As();
        b1._StageUpFragment();
        b2._ExpressionTest();
        b2._Filter();
        b1.StageUpFragment_();
        b4.Optional_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#Rule");
        b1.VarName("rule");
        b1.Quantifier("!");
        b1._Variable();
        b4._Optional();
        b1._StageUpFragment();
        b2._CartesianUpdate();
        b2.CartesianUpdate_();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b1.StageUpFragment_();
        b4.As_();
        b4.When_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#Predicate");
        b1.VarName("predicate");
        b1.Quantifier("!");
        b1._Variable();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#Rule");
        b1.VarName("rule");
        b1.Quantifier("!");
        b1._Variable();
        b4._When();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#Name");
        b1.VarName("name");
        b1.Quantifier("!");
        b1._Variable();
        b4._As();
        b1._StageUpFragment();
        b2._ExpressionTest();
        b2._Filter();
        b1.StageUpFragment_();
        b4.When_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#Predicate");
        b1.VarName("predicate");
        b1.Quantifier("!");
        b1._Variable();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Grammars#Rule");
        b1.VarName("rule");
        b1.Quantifier("!");
        b1._Variable();
        b4._When();
        b1._StageUpFragment();
        b2._CartesianUpdate();
        b2._Choose();
        b2._If();
        b2.SelfStep();
        b2._Choose();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("addAsRules");
        b1.Resolver();
        b2.Block_(2);
        b2.QueryDeclaration_();
        b2.Name("needsAsRules");
        b2.Names_(1);
        b2.Name("count");
        b2._Names();
        b2.Choose_(2);
        b2.Filter_();
        b2.DescendantStep();
        b2.TypeTest("As");
        b2._Filter();
        b2.Block_(4);
        b2.QueryDeclaration_();
        b2.Name("isInlineChild");
        b1.Resolver();
        b2.Choose_(4);
        b2.Filter_();
        b2.SelfStep();
        b2.And_(2);
        b2.TypeTest("Optional");
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.FeatureStep("rule");
        b2.Call_();
        b2.Name("isInlineChild");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b2.Path_(3);
        b2.Filter_();
        b2.SelfStep();
        b2.Or_(2);
        b2.TypeTest("Split");
        b2.TypeTest("When");
        b2._Or();
        b2._Filter();
        b2.FeatureStep("rule");
        b2.Call_();
        b2.Name("isInlineChild");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.Filter_();
        b2.SelfStep();
        b2.And_(2);
        b2.TypeTest("Concatenate");
        b2.Not_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.ChildStep();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isTokenNonTerminal");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2._Filter();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isTokenNonTerminal");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Filter();
        b2._Choose();
        b2._QueryDeclaration();
        b2.Filter_();
        b2.IntLiteral(0);
        b2.VariableTest("count");
        b2._Filter();
        b2.For_();
        b2.Filter_();
        b2.ChildStep();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isInlineChild");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Filter();
        b2.CartesianUpdate_();
        b2.VariableRefStep("count");
        b2.Addition_();
        b2.VariableRefStep("count");
        b2.IntLiteral(1);
        b2._Addition();
        b2._CartesianUpdate();
        b2._For();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.GreaterThan_();
        b2.Subtraction_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get concatenate size");
        b1.Resolver();
        b3.Variable("self");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wSize()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b2.VariableRefStep("count");
        b2._Subtraction();
        b2.IntLiteral(1);
        b2._GreaterThan();
        b2._ExpressionTest();
        b2._Filter();
        b2._Block();
        b2._Choose();
        b2._QueryDeclaration();
        b2.Choose_(3);
        b2.Block_(3);
        b2.Filter_();
        b2.BooleanLiteral(false);
        b2.VariableTest("variableTest");
        b2._Filter();
        b2.VariableRefStep("variableTest");
        b2.If_();
        b2.And_(4);
        b2.ExpressionTest_();
        b2.Filter_();
        b2.ParentStep();
        b2.TypeTest("Optional");
        b2._Filter();
        b2._ExpressionTest();
        b2.AtFeatureTest("rule");
        b2.Not_();
        b2.TypeTest("As");
        b2._Not();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.DescendantOrSelfStep();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isProductionNonTerminal");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Filter();
        b2._ExpressionTest();
        b2._And();
        b2.Path_(2);
        b2.Sequence_(1);
        b2.CartesianUpdate_();
        b2.SelfStep();
        b1.StageUpFragment_();
        b4.As_();
        b1.StageDownFragment_();
        b2.SelfStep();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.Choose_(2);
        b2.Path_(3);
        b2.ParentStep();
        b2.Filter_();
        b2.ParentStep();
        b2.TypeTest("As");
        b2._Filter();
        b2.FeatureStep("name");
        b2._Path();
        b2.StringLiteral("$fresh_name$");
        b2._Choose();
        b1._StageDownFragment();
        b4._As();
        b1._StageUpFragment();
        b2._CartesianUpdate();
        b2._Sequence();
        b2.Sequence_(2);
        b2.FeatureStep("rule");
        b2.SelfStep();
        b2._Sequence();
        b2._Path();
        b2._If();
        b2._Block();
        b2.If_();
        b2.And_(2);
        b2.TypeTest("Concatenate");
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("needsAsRules");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._And();
        b2.Sequence_(2);
        b2.For_();
        b2.Filter_();
        b2.Call_();
        b2.Name("allNonTokenChildren");
        b1.Resolver();
        b2._Call();
        b2.Not_();
        b2.Or_(2);
        b2.TypeTest("As");
        b2.TypeTest("Optional");
        b2._Or();
        b2._Not();
        b2._Filter();
        b2.CartesianUpdate_();
        b2.SelfStep();
        b1.StageUpFragment_();
        b4.As_();
        b1.StageDownFragment_();
        b2.SelfStep();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.StringLiteral("$fresh_name$");
        b1._StageDownFragment();
        b4._As();
        b1._StageUpFragment();
        b2._CartesianUpdate();
        b2._For();
        b2.SelfStep();
        b2._Sequence();
        b2._If();
        b2.SelfStep();
        b2._Choose();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("addNestedProductions");
        b1.Resolver();
        b2.Block_(4);
        b2.QueryDeclaration_();
        b2.Name("ancestorInProduction");
        b1.Resolver();
        b2.Path_(2);
        b2.ParentStep();
        b2.Choose_(2);
        b2.If_();
        b2.TypeTest("Production");
        b2.SelfStep();
        b2._If();
        b2.Do_();
        b2.Sequence_(2);
        b2.SelfStep();
        b2.Call_();
        b2.Name("ancestorInProduction");
        b1.Resolver();
        b2._Call();
        b2._Sequence();
        b2._Do();
        b2._Choose();
        b2._Path();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("calculateProductionName");
        b2.Names_(2);
        b2.Name("inheritedName");
        b2.Name("ntName");
        b2._Names();
        b2.Block_(3);
        b2.Filter_();
        b2.Choose_(2);
        b2.Path_(2);
        b2.Filter_();
        b2.Call_();
        b2.Name("ancestorInProduction");
        b1.Resolver();
        b2._Call();
        b2.TypeTest("As");
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.Not_();
        b2.ExpressionTest_();
        b1.StageUpFragment_();
        b4.Name("$fresh_name$");
        b1._StageUpFragment();
        b2._ExpressionTest();
        b2._Not();
        b2._Filter();
        b2._Path();
        b2.StringLiteral("$fresh_ntname$");
        b2._Choose();
        b2.VariableTest("inheritedName");
        b2._Filter();
        b2.Filter_();
        b3.InvokeJavaClassMethod_();
        b3.Text("to upper caps");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.util.StringUtils");
        b3.StringLiteral("toUpperCap(java.lang.String)");
        b3.Expressions_(1);
        b3.Variable("inheritedName");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b2.VariableTest("ntName");
        b2._Filter();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("next fresh non terminal");
        b1.Resolver();
        b3.Variable("freshNameGenerator");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.util.FreshNameGenerator");
        b3.StringLiteral("nextFreshName(java.lang.String)");
        b3.Expressions_(1);
        b3.Variable("ntName");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("needsProduction");
        b1.Resolver();
        b2.Block_(1);
        b2.Filter_();
        b2.SelfStep();
        b2.Or_(1);
        b2.And_(2);
        b2.ExpressionTest_();
        b2.Filter_();
        b2.Call_();
        b2.Name("effectiveParent");
        b1.Resolver();
        b2._Call();
        b2.Or_(4);
        b2.And_(2);
        b2.TypeTest("Concatenate");
        b2.Not_();
        b2.Or_(2);
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isInlineConcatenate");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.Call_();
        b2.Name("effectiveParent");
        b1.Resolver();
        b2._Call();
        b2.TypeTest("Production");
        b2._Filter();
        b2._ExpressionTest();
        b2._Or();
        b2._Not();
        b2._And();
        b2.TypeTest("Choose");
        b2.TypeTest("Repeat");
        b2.TypeTest("Optional");
        b2._Or();
        b2._Filter();
        b2._ExpressionTest();
        b2.Or_(4);
        b2.TypeTest("Choose");
        b2.TypeTest("DataTerminal");
        b2.TypeTest("Repeat");
        b2.And_(2);
        b2.TypeTest("Concatenate");
        b2.Not_();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isInlineConcatenate");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2._Or();
        b2._And();
        b2._Or();
        b2._Filter();
        b2._Block();
        b2._QueryDeclaration();
        b2.Choose_(3);
        b2.If_();
        b2.Or_(1);
        b2.And_(3);
        b2.Or_(1);
        b2.TypeTest("As");
        b2._Or();
        b2.Not_();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.ParentStep();
        b2.TypeTest("Choose");
        b2._Filter();
        b2._ExpressionTest();
        b2._Not();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("rule");
        b2.Not_();
        b2.One_();
        b2.Call_();
        b2.Name("allNonTokenChildren");
        b1.Resolver();
        b2._Call();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isProductionNonTerminal");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._One();
        b2._Not();
        b2._Filter();
        b2._ExpressionTest();
        b2._And();
        b2._Or();
        b2.CartesianUpdate_();
        b2.FeatureStep("rule");
        b1.StageUpFragment_();
        b4.Production_();
        b1.StageDownFragment_();
        b2.Call_();
        b2.Name("calculateProductionName");
        b1.Resolver();
        b2._Call();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.SelfStep();
        b1._StageDownFragment();
        b1.Resolver();
        b4._Production();
        b1._StageUpFragment();
        b2._CartesianUpdate();
        b2._If();
        b2.If_();
        b2.And_(1);
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("needsProduction");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._And();
        b2.CartesianUpdate_();
        b2.SelfStep();
        b1.StageUpFragment_();
        b4.Production_();
        b1.StageDownFragment_();
        b2.Call_();
        b2.Name("calculateProductionName");
        b1.Resolver();
        b2._Call();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.SelfStep();
        b1._StageDownFragment();
        b1.Resolver();
        b4._Production();
        b1._StageUpFragment();
        b2._CartesianUpdate();
        b2._If();
        b2.SelfStep();
        b2._Choose();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("completeAndExtractNestedProduction");
        b1.Resolver();
        b2.Block_(4);
        b2.QueryDeclaration_();
        b2.Name("effectiveRule");
        b1.Resolver();
        b2.Path_(2);
        b2.FeatureStep("rule");
        b2.Choose_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.Not_();
        b2.Or_(2);
        b2.TypeTest("Split");
        b2.TypeTest("When");
        b2._Or();
        b2._Not();
        b2._Filter();
        b2.Call_();
        b2.Name("effectiveRule");
        b1.Resolver();
        b2._Call();
        b2._Choose();
        b2._Path();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("getInlineConcatenateType");
        b1.Resolver();
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isInlineConcatenate");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Filter();
        b2.Filter_();
        b2.DescendantStep();
        b2.Or_(3);
        b2.TypeTest("Choose");
        b2.TypeTest("DataTerminal");
        b2.TypeTest("Repeat");
        b2._Or();
        b2._Filter();
        b2._Path();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("getTokenProduction");
        b2.Names_(1);
        b2.Name("nonTerminal");
        b2._Names();
        b2.Block_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("nonTerminal");
        b2._Filter();
        b2.Path_(3);
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("Grammar");
        b2._Filter();
        b2.FeatureStep("lexicalStructure");
        b2.Filter_();
        b2.ChildStep();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("nonTerminal");
        b2._Filter();
        b2._ExpressionTest();
        b2._Filter();
        b2._Path();
        b2._Block();
        b2._QueryDeclaration();
        b2.Choose_(2);
        b2.If_();
        b2.TypeTest("Production");
        b2.Block_(2);
        b2.CartesianUpdate_();
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.Call_();
        b2.Name("effectiveRule");
        b1.Resolver();
        b2._Call();
        b2.Filter_();
        b2.Sequence_(2);
        b2.SelfStep();
        b2.Call_();
        b2.Name("getInlineConcatenateType");
        b1.Resolver();
        b2._Call();
        b2._Sequence();
        b2.Or_(2);
        b2.And_(2);
        b2.TypeTest("DataTerminal");
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("format");
        b2.And_(2);
        b2.KindTest("IMPL");
        b2.VariableTest("format");
        b2._And();
        b2._Filter();
        b2._ExpressionTest();
        b2._And();
        b2.And_(2);
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isTokenNonTerminal");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2.ExpressionTest_();
        b2.Path_(2);
        b2.Call_();
        b2.Name("getTokenProduction");
        b1.Resolver();
        b2._Call();
        b2.Filter_();
        b2.FeatureStep("rule");
        b2.And_(2);
        b2.TypeTest("DataTerminal");
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("format");
        b2.And_(2);
        b2.KindTest("IMPL");
        b2.VariableTest("format");
        b2._And();
        b2._Filter();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2._And();
        b2._Or();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("template");
        b2.KindTest("RESOLVER");
        b2._Filter();
        b2._Path();
        b3.InvokeJavaClassMethod_();
        b3.Text("derive data type from format");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers");
        b3.StringLiteral("calculateDataType(org.whole.lang.grammars.model.Format)");
        b3.Expressions_(1);
        b3.Variable("format");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b2._CartesianUpdate();
        b2.If_();
        b2.Not_();
        b2.ExpressionTest_();
        b2.PointwiseEquals_();
        b2.ParentStep();
        b2.VariableRefStep("ps");
        b2._PointwiseEquals();
        b2._ExpressionTest();
        b2._Not();
        b2.Path_(2);
        b2.Block_(2);
        b2.PointwiseInsert_();
        b2.Placement("INTO");
        b2.VariableRefStep("newProductions");
        b2.SelfStep();
        b2._PointwiseInsert();
        b2.CartesianUpdate_();
        b2.SelfStep();
        b2.FeatureStep("name");
        b2._CartesianUpdate();
        b2._Block();
        b2.Call_();
        b2.Name("addAsRules");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2._If();
        b2._Block();
        b2._If();
        b2.SelfStep();
        b2._Choose();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("renameFreshNonTerminalNames");
        b2.Names_(2);
        b2.Name("alphaRenameMap");
        b2.Name("freshNtName");
        b2._Names();
        b2.Block_(5);
        b2.QueryDeclaration_();
        b2.Name("replaceFreshNames");
        b2.Names_(1);
        b2.Name("name");
        b2._Names();
        b2.Sequence_(2);
        b2.For_();
        b2.Path_(3);
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("http://lang.whole.org/Grammars#name");
        b2.VariableTest("name");
        b2._Filter();
        b2._ExpressionTest();
        b2.Not_();
        b2.ExpressionTest_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("matches $fresh_ntname$");
        b1.Resolver();
        b3.Variable("name");
        b1.Resolver();
        b3.StringLiteral("java.lang.String");
        b3.StringLiteral("matches(java.lang.String)");
        b3.Expressions_(1);
        b3.StringLiteral("\\$fresh_ntname\\$\\d*");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2._Filter();
        b2.FeatureStep("http://lang.whole.org/Grammars#rule");
        b2.Filter_();
        b2.DescendantStep();
        b2.And_(2);
        b2.TypeTest("NonTerminal");
        b2.ExpressionTest_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("matches $fresh_ntname$");
        b1.Resolver();
        b3.Variable("self");
        b1.Resolver();
        b3.StringLiteral("java.lang.String");
        b3.StringLiteral("matches(java.lang.String)");
        b3.Expressions_(1);
        b3.StringLiteral("\\$fresh_ntname\\$\\d*");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b2._Path();
        b2.Block_(2);
        b2.Filter_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("calculate fresh non terminal");
        b1.Resolver();
        b3.Variable("freshNameGenerator");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.util.FreshNameGenerator");
        b3.StringLiteral("nextFreshName(java.lang.String)");
        b3.Expressions_(1);
        b1.SameStageFragment_();
        b2.Path_(2);
        b2.Filter_();
        b2.AncestorStep();
        b2.TypeTest("Production");
        b2._Filter();
        b2.FeatureStep("name");
        b2._Path();
        b1._SameStageFragment();
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2.VariableTest("freshNtName");
        b2._Filter();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("perform alpha rename");
        b1.Resolver();
        b3.Variable("alphaRenameMap");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers$AlphaRenameMap");
        b3.StringLiteral("rename(java.lang.String, java.lang.String)");
        b3.Expressions_(2);
        b3.Variable("self");
        b3.Variable("freshNtName");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._Block();
        b2._For();
        b2.If_();
        b2.ExpressionTest_();
        b2.Path_(3);
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("http://lang.whole.org/Grammars#name");
        b2.VariableTest("name");
        b2._Filter();
        b2._ExpressionTest();
        b2.Not_();
        b2.ExpressionTest_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("matches $fresh_ntname$");
        b1.Resolver();
        b3.Variable("name");
        b1.Resolver();
        b3.StringLiteral("java.lang.String");
        b3.StringLiteral("matches(java.lang.String)");
        b3.Expressions_(1);
        b3.StringLiteral("\\$fresh_ntname\\$\\d*");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._ExpressionTest();
        b2._Not();
        b2._And();
        b2._Filter();
        b2.FeatureStep("http://lang.whole.org/Grammars#rule");
        b2.Filter_();
        b2.DescendantStep();
        b2.And_(2);
        b2.TypeTest("NonTerminal");
        b2.ExpressionTest_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("matches $fresh_ntname$");
        b1.Resolver();
        b3.Variable("self");
        b1.Resolver();
        b3.StringLiteral("java.lang.String");
        b3.StringLiteral("matches(java.lang.String)");
        b3.Expressions_(1);
        b3.StringLiteral("\\$fresh_ntname\\$\\d*");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b2._Path();
        b2._ExpressionTest();
        b2.Call_();
        b2.Name("replaceFreshNames");
        b1.Resolver();
        b2._Call();
        b2._If();
        b2._Sequence();
        b2._QueryDeclaration();
        b2.Filter_();
        b3.CreateJavaClassInstance_();
        b3.Text("create alpha rename map");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers$AlphaRenameMap");
        b3.StringLiteral("AlphaRenameMap()");
        b1.Resolver();
        b3._CreateJavaClassInstance();
        b2.VariableTest("alphaRenameMap");
        b2._Filter();
        b2.Path_(2);
        b2.Filter_();
        b2.DescendantStep();
        b2.And_(2);
        b2.TypeTest("NonTerminal");
        b2.ExpressionTest_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("matches $fresh_ntname$");
        b1.Resolver();
        b3.Variable("self");
        b1.Resolver();
        b3.StringLiteral("java.lang.String");
        b3.StringLiteral("matches(java.lang.String)");
        b3.Expressions_(1);
        b3.StringLiteral("\\$fresh_ntname\\$\\d*");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("update alpha rename map");
        b1.Resolver();
        b3.Variable("alphaRenameMap");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers$AlphaRenameMap");
        b3.StringLiteral("add(org.whole.lang.grammars.model.NonTerminal)");
        b3.Expressions_(1);
        b3.Variable("self");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b2._Path();
        b2.Call_();
        b2.Name("replaceFreshNames");
        b1.Resolver();
        b2._Call();
        b2.SelfStep();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("addAsRulesInTopLevelProductions");
        b2.Names_(4);
        b2.Name("featureNameGenerator");
        b2.Name("featureName");
        b2.Name("asName");
        b2.Name("ntName");
        b2._Names();
        b2.Block_(2);
        b2.For_();
        b2.Path_(3);
        b2.Filter_();
        b2.ChildStep();
        b2.TypeTest("Production");
        b2._Filter();
        b2.FeatureStep("rule");
        b2.Filter_();
        b2.Call_();
        b2.Name("allNonTokenChildren");
        b1.Resolver();
        b2._Call();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isProductionNonTerminal");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Filter();
        b2._Path();
        b2.CartesianUpdate_();
        b2.SelfStep();
        b1.StageUpFragment_();
        b4.As_();
        b1.StageDownFragment_();
        b2.SelfStep();
        b1._StageDownFragment();
        b1.StageDownFragment_();
        b2.StringLiteral("$fresh_name$");
        b1._StageDownFragment();
        b4._As();
        b1._StageUpFragment();
        b2._CartesianUpdate();
        b2._For();
        b2.SelfStep();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("renameFreshAsNames");
        b2.Names_(4);
        b2.Name("featureNameGenerator");
        b2.Name("featureName");
        b2.Name("asName");
        b2.Name("ntName");
        b2._Names();
        b2.Block_(4);
        b2.Filter_();
        b3.CreateJavaClassInstance_();
        b3.Text("create feature fresh name generator");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.util.FreshNameGenerator");
        b3.StringLiteral("FreshNameGenerator()");
        b1.Resolver();
        b3._CreateJavaClassInstance();
        b2.VariableTest("featureNameGenerator");
        b2._Filter();
        b2.For_();
        b2.Path_(2);
        b2.Filter_();
        b2.DescendantOrSelfStep();
        b2.TypeTest("As");
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.And_(2);
        b2.Not_();
        b2.ExpressionTest_();
        b1.StageUpFragment_();
        b4.Name("$fresh_name$");
        b1._StageUpFragment();
        b2._ExpressionTest();
        b2._Not();
        b2.VariableTest("asName");
        b2._And();
        b2._Filter();
        b2._Path();
        b3.InvokeJavaClassMethod_();
        b3.Text("update the feature fresh name generator");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers");
        b3.StringLiteral("addBoundName(org.whole.lang.util.FreshNameGenerator, java.lang.String)");
        b3.Expressions_(2);
        b3.Variable("featureNameGenerator");
        b3.Variable("asName");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b2._For();
        b2.For_();
        b2.Filter_();
        b2.DescendantOrSelfStep();
        b2.And_(3);
        b2.TypeTest("As");
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.ExpressionTest_();
        b1.StageUpFragment_();
        b4.Name("$fresh_name$");
        b1._StageUpFragment();
        b2._ExpressionTest();
        b2._Filter();
        b2._ExpressionTest();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.Filter_();
        b2.DescendantStep();
        b2.ExpressionTest_();
        b2.Call_();
        b2.Name("isProductionNonTerminal");
        b1.Resolver();
        b2._Call();
        b2._ExpressionTest();
        b2._Filter();
        b2.VariableTest("ntName");
        b2._Filter();
        b2._ExpressionTest();
        b2._And();
        b2._Filter();
        b2.CartesianUpdate_();
        b2.FeatureStep("name");
        b3.InvokeJavaClassMethod_();
        b3.Text("generate fresh feature name");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.GrammarsActionsHelpers");
        b3.StringLiteral("nextFeatureFreshName(org.whole.lang.util.FreshNameGenerator, java.lang.String)");
        b3.Expressions_(2);
        b3.Variable("featureNameGenerator");
        b3.Variable("ntName");
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b2._CartesianUpdate();
        b2._For();
        b2.SelfStep();
        b2._Block();
        b2._QueryDeclaration();
        b2.PointwiseUpdate_();
        b2.Filter_();
        b2.FeatureStep("startSymbol");
        b2.KindTest("RESOLVER");
        b2._Filter();
        b2.Path_(3);
        b2.FeatureStep("phraseStructure");
        b2.Filter_();
        b2.ChildStep();
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2._Filter();
        b2.FeatureStep("name");
        b2._Path();
        b2._PointwiseUpdate();
        b2.Path_(2);
        b2.Filter_();
        b2.FeatureStep("phraseStructure");
        b2.VariableTest("ps");
        b2._Filter();
        b2.Sequence_(7);
        b2.Call_();
        b2.Name("collectNonTerminalNames");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("extractTokens");
        b1.Resolver();
        b2._Call();
        b2.Path_(5);
        b2.Call_();
        b2.Name("bottomUp");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("removeUglyAs");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("addAsRules");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("addNestedProductions");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("completeAndExtractNestedProduction");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.CartesianInsert_();
        b2.Placement("INTO");
        b2.VariableRefStep("ps");
        b2.Path_(2);
        b2.VariableRefStep("newProductions");
        b2.ChildStep();
        b2._Path();
        b2._CartesianInsert();
        b2.Call_();
        b2.Name("renameFreshNonTerminalNames");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("addAsRulesInTopLevelProductions");
        b1.Resolver();
        b2._Call();
        b2.Path_(3);
        b2.ChildStep();
        b2.FeatureStep("rule");
        b2.Call_();
        b2.Name("renameFreshAsNames");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2._Sequence();
        b2._Path();
        b2.SelfStep();
        b2._Block();
        b0._SimpleAction();
        b1.Resolver();
        b1.Resolver();
        b0.SimpleAction_();
        b0.Label("Generate artifacts");
        b2.Select_();
        b1.StageUpFragment_();
        org.whole.lang.artifacts.builders.IArtifactsBuilder b5 = (org.whole.lang.artifacts.builders.IArtifactsBuilder) op.wGetBuilder(org.whole.lang.artifacts.reflect.ArtifactsLanguageKit.URI);
        b5.Workspace_();
        b1.Resolver();
        b5.Projects_(1);
        b5.Project_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#ProjectName");
        b1.VarName("projectName");
        b1.Quantifier("!");
        b1._Variable();
        b5.Natures_(1);
        b1.Resolver();
        b5._Natures();
        b1.Resolver();
        b5.Artifacts_(1);
        b5.FolderArtifact_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#FolderName");
        b1.VarName("sourceFolderName");
        b1.Quantifier("!");
        b1._Variable();
        b1.Resolver();
        b5.Artifacts_(1);
        b5.PackageArtifact_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#PackageName");
        b1.VarName("packageName");
        b1.Quantifier("!");
        b1._Variable();
        b1.Resolver();
        b5.Artifacts_(1);
        b5.FileArtifact_();
        b5.NameWithExtension_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Artifacts#Name");
        b1.VarName("modelName");
        b1.Quantifier("!");
        b1._Variable();
        b5.Extension("java");
        b5._NameWithExtension();
        b5.Metadata_();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b5.PersistenceKitId("org.whole.lang.java.codebase.JavaBuilderPersistenceKit");
        b5._Metadata();
        b1.StageUpFragment_();
        b1.Variable_();
        b1.VarType("http://lang.whole.org/Models#Model");
        b1.VarName("model");
        b1.Quantifier("!");
        b1._Variable();
        b1._StageUpFragment();
        b5._FileArtifact();
        b5._Artifacts();
        b5._PackageArtifact();
        b5._Artifacts();
        b5._FolderArtifact();
        b5._Artifacts();
        b1.Resolver();
        b5._Project();
        b5._Projects();
        b5._Workspace();
        b1._StageUpFragment();
        b2.Filter_();
        b2.SelfStep();
        b2.ExpressionTest_();
        b2.Filter_();
        b2.FeatureStep("targetLanguage");
        b2.TypeTest("http://lang.whole.org/Grammars#LanguageDescriptor");
        b2._Filter();
        b2._ExpressionTest();
        b2._Filter();
        b2.Sequence_(3);
        b2.Path_(2);
        b2.FeatureStep("targetLanguage");
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("languageName");
        b2._Filter();
        b2._Path();
        b2.Filter_();
        b2.Addition_();
        b2.VariableRefStep("languageName");
        b2.StringLiteral("Model");
        b2._Addition();
        b2.VariableTest("modelName");
        b2._Filter();
        b2.Filter_();
        b3.InvokeJavaClassMethod_();
        b3.Text("derive model");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
        b3.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
        b3.Expressions_(2);
        b3.Variable("self");
        b3.BooleanLiteral(true);
        b3._Expressions();
        b3._InvokeJavaClassMethod();
        b2.VariableTest("model");
        b2._Filter();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b0._SimpleAction();
        b0._ToolbarActions();
        b0.ContextMenuActions_();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b1.Resolver();
        b0._ContextMenuActions();
        b0._LanguageActionFactory();
    }
}
